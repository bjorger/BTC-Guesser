{"version":3,"file":"moq.ts.js","sources":["../../../projects/moq/src/lib/moq.ts","../../projects/moq/src/lib/expected-expressions/expression-predicates.ts","../../../projects/moq/src/lib/interactions.ts","../../projects/moq/src/lib/expected-expressions/expected-expressions.ts","../../projects/moq/src/lib/expected-expressions/expected-expression-reflector.ts","../../projects/moq/src/lib/interceptors/proxy.factory.ts","../../../projects/moq/src/lib/times.ts","../../projects/moq/src/lib/tracker/tracker.ts","../../projects/moq/src/lib/verification/verify-error.ts","../../projects/moq/src/lib/verification/verifier.ts","../../projects/moq/src/lib/interceptors/prototype.storage.ts","../../projects/moq/src/lib/static.injector/stringify.ts","../../projects/moq/src/lib/static.injector/property.ts","../../projects/moq/src/lib/static.injector/forward_ref.ts","../../projects/moq/src/lib/static.injector/injection_token.ts","../../projects/moq/src/lib/static.injector/injector_compatibility.ts","../projects/moq/src/lib/static.injector/interface/injector.ts","../../projects/moq/src/lib/static.injector/metadata.ts","../../projects/moq/src/lib/static.injector/injector.ts","../../projects/moq/src/lib/injector/injector.factory.ts","../../projects/moq/src/lib/injector/moq.injection-token.ts","../../projects/moq/src/lib/mock-options/mock-options.injection-token.ts","../../projects/moq/src/lib/presets/preset-builder-factory.injection-token.ts","../../projects/moq/src/lib/tracker/sequence-id.ts","../../projects/moq/src/lib/tracker/tracker.providers.ts","../../projects/moq/src/lib/expected-expressions/reflector.providers.ts","../projects/moq/src/lib/presets/presets/mimics.preset.ts","../projects/moq/src/lib/presets/presets/returns.preset.ts","../projects/moq/src/lib/presets/presets/throws.preset.ts","../projects/moq/src/lib/presets/presets/callbacks.preset.ts","../../projects/moq/src/lib/playables/playable-exactly.ts","../../projects/moq/src/lib/playables/playable-never.ts","../../projects/moq/src/lib/playables/playable-once.ts","../../projects/moq/src/lib/playables/playable-always.ts","../../projects/moq/src/lib/playables/playable-sequence.ts","../../projects/moq/src/lib/playables/play-times.ts","../../projects/moq/src/lib/presets/preset-builder.ts","../../projects/moq/src/lib/presets/presets.ts","../../projects/moq/src/lib/presets/presets.providers.ts","../../projects/moq/src/lib/verification/call-counter.ts","../../projects/moq/src/lib/formatters/verify-formatter.ts","../../projects/moq/src/lib/expression-matchers/expression.matcher.ts","../../projects/moq/src/lib/verification/verification.providers.ts","../../projects/moq/src/lib/interceptors/apply.trap.ts","../../projects/moq/src/lib/interaction-players/interaction.player.ts","../../projects/moq/src/lib/interceptors/get.trap.ts","../../projects/moq/src/lib/interceptors/properties-value.storage.ts","../projects/moq/src/lib/explorers/has-property.explorer/has-property.explorer.ts","../projects/moq/src/lib/explorers/has-method.explorer/has-method.explorer.ts","../../projects/moq/src/lib/interceptors/spy-function.provider.ts","../../projects/moq/src/lib/interceptors/get-prototype-of.trap.ts","../../projects/moq/src/lib/interceptors/has.trap.ts","../projects/moq/src/lib/explorers/in-operator-interaction.explorer/in-operator-interaction.explorer.ts","../../projects/moq/src/lib/playables/preset-playables.updater.ts","../../projects/moq/src/lib/interceptors/set.trap.ts","../../projects/moq/src/lib/interceptors/set-prototype-of.trap.ts","../projects/moq/src/lib/explorers/has-property.explorer/property-is-read-only.tester.ts","../../projects/moq/src/lib/interceptors/interceptors.providers.ts","../../projects/moq/src/lib/playables/playables.providers.ts","../../projects/moq/src/lib/interaction-players/preset.player.ts","../../projects/moq/src/lib/interaction-players/callback-preset.player.ts","../../projects/moq/src/lib/interaction-players/mimics-preset.player.ts","../../projects/moq/src/lib/interaction-players/playable-preset.provider.ts","../../projects/moq/src/lib/interaction-players/reflect-apply.injection-token.ts","../../projects/moq/src/lib/interaction-players/interaction-players.providers.ts","../../projects/moq/src/lib/formatters/expected-expression-formatter.ts","../../projects/moq/src/lib/formatters/tracked-expressions-formatter.ts","../../projects/moq/src/lib/formatters/expression-formatter.ts","../../projects/moq/src/lib/formatters/set.property-formatter.ts","../../projects/moq/src/lib/formatters/constant-formatter.ts","../../projects/moq/src/lib/formatters/property-key.formatter.ts","../../projects/moq/src/lib/formatters/named.method-formatter.ts","../../projects/moq/src/lib/formatters/method-formatter.ts","../../projects/moq/src/lib/formatters/in-operator.formatter.ts","../../projects/moq/src/lib/formatters/get.property-formatter.ts","../../projects/moq/src/lib/formatters/formatters.providers.ts","../../projects/moq/src/lib/expression-matchers/set-property.matcher.ts","../../projects/moq/src/lib/expression-matchers/constant.matcher.ts","../../projects/moq/src/lib/expression-matchers/instance-method.matcher.ts","../../projects/moq/src/lib/expression-matchers/arguments.matcher.ts","../../projects/moq/src/lib/expression-matchers/method.matcher.ts","../../projects/moq/src/lib/expression-matchers/in-operator.matcher.ts","../../projects/moq/src/lib/expression-matchers/get-property.matcher.ts","../../projects/moq/src/lib/expression-matchers/expression-matchers.providers.ts","../projects/moq/src/lib/explorers/has-method.explorer/expression.has-method.explorer.ts","../projects/moq/src/lib/explorers/members.explorer/members-method.explorer.ts","../projects/moq/src/lib/explorers/has-method.explorer/preset.has-method.explorer.ts","../projects/moq/src/lib/explorers/has-method.explorer/object.has-method.explorer.ts","../projects/moq/src/lib/explorers/has-property.explorer/expression-has-property.explorer.ts","../projects/moq/src/lib/explorers/members.explorer/members-property.explorer.ts","../projects/moq/src/lib/explorers/has-property.explorer/preset-has-property.explorer.ts","../projects/moq/src/lib/explorers/has-property.explorer/object-has-property.explorer.ts","../projects/moq/src/lib/explorers/in-operator-interaction.explorer/preset.has-in-operator.explorer.ts","../projects/moq/src/lib/explorers/members.explorer/property-descriptor.provider.ts","../../projects/moq/src/lib/explorers/reflect-has.injection-token.ts","../../projects/moq/src/lib/explorers/type-explorers.providers.ts","../../projects/moq/src/lib/mock-options/mock-options.builder.ts","../../projects/moq/src/lib/mock-options/mock-options.providers.ts","../../projects/moq/src/lib/injector/default-injector.config.ts","../../../projects/moq/src/lib/mock.ts","../../../projects/moq/src/lib/dump.ts","../../projects/moq/src/lib/equal-matchers/equal.matcher.ts","../../projects/moq/src/lib/equal-matchers/equal-constant.matcher.ts","../../projects/moq/src/lib/equal-matchers/common-type.provider.ts","../../projects/moq/src/lib/equal-matchers/types.matcher.ts","../../projects/moq/src/lib/equal-matchers/primitive.matcher.ts","../../projects/moq/src/lib/equal-matchers/object.matcher.ts","../../projects/moq/src/lib/equal-matchers/function.matcher.ts","../../projects/moq/src/lib/equal-matchers/iterable.tester.ts","../../projects/moq/src/lib/equal-matchers/iterator.matcher.ts","../../projects/moq/src/lib/equal-matchers/object-matchers.injection-token.ts","../../projects/moq/src/lib/equal-matchers/pojo.matcher.ts","../../projects/moq/src/lib/equal-matchers/object-map.provider.ts","../../projects/moq/src/lib/equal-matchers/map.matcher.ts","../../projects/moq/src/lib/equal-matchers/equal-matchers.providers.ts","../../projects/moq/src/lib/equal-matchers/date.matcher.ts","../../projects/moq/src/lib/injector/equal-matching-injector.config.ts","../../../../projects/moq/src/public_api.ts","../../../../projects/moq/src/moq.ts.ts"],"sourcesContent":["import { IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\r\nimport { Times } from \"./times\";\r\nimport { Interaction } from \"./interactions\";\r\nimport { Tracker } from \"./tracker/tracker\";\r\nimport { StaticProvider } from \"./static.injector/interface/provider\";\r\n\r\nexport const enum PlayableUpdateReason {\r\n    /**\r\n     * The playable is update because it's setup is about to be played\r\n     */\r\n    OwnSetupWouldBePlayed,\r\n    /**\r\n     * The playable is update because another setup is about to be played\r\n     */\r\n    OtherSetupWouldBePlayed\r\n}\r\n\r\n/**\r\n * Provides playable logic for a setup\r\n */\r\nexport interface IPlayable {\r\n    /**\r\n     * Tests if setup is playable\r\n     */\r\n    isPlayable(): boolean;\r\n\r\n    /**\r\n     * Invokes as the setup is about to be played, so the playable logic can change it's state.\r\n     *\r\n     * @param reason The reason why this update is called {@link PlayableUpdateReason}\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *     const playable1 = new PlayableOnce();\r\n     *     const playable2 = new PlayableOnce();\r\n     *\r\n     *     const mock = new Mock<(val: number) => void)>()\r\n     *     // setup A\r\n     *     .setup(instance => instance(1))\r\n     *     .play(playable1)\r\n     *     .returns(1)\r\n     *     // setup B\r\n     *     .setup(instance => instance(2))\r\n     *     .play(playable2)\r\n     *     .returns(2);\r\n     *\r\n     *     const actual = mock.object()(1);\r\n     *     // at this point the update of playable1 should be called with OwnSetupWouldBePlayed\r\n     *     // because setup A would be played\r\n     *     // and the update of playable2 should be called with OtherSetupWouldBePlayed\r\n     * ```\r\n     */\r\n    update(reason: PlayableUpdateReason): void;\r\n}\r\n\r\n/**\r\n * Sets a behaviour rule for a particular use case\r\n *\r\n * @param T The type of mocked object.\r\n */\r\nexport interface IPresetBuilder<T, TValue = any> {\r\n    /**\r\n     * Returns the provided value as a result of interaction in case of\r\n     * - get property value\r\n     * - invocation a function\r\n     *\r\n     * Controls write operation in case of\r\n     * - property assignment (true - the assignment is allowed, false - the assignment is not allowed)\r\n     *\r\n     * @param value The value\r\n     */\r\n    returns(value: TValue): IMock<T>;\r\n\r\n    /**\r\n     * Throws the provided exception.\r\n     */\r\n    throws<TException>(exception: TException): IMock<T>;\r\n\r\n    /**\r\n     * @param callback A callback function that will intercept the interaction.\r\n     * The function may returns a value that will be provided as result (see {@link IPresetBuilder.returns})\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *     const ipcRendererMock = new StrictMock<typeof ipcRenderer>()\r\n     *     .setup(instance => instance.on(ipcRendererChannelName, It.IsAny()))\r\n     *     .callback(({args: [channel, listener]}) => listener(undefined, response));\r\n     * ```\r\n     */\r\n    callback(callback: (interaction: Interaction) => TValue): IMock<T>;\r\n\r\n    /**\r\n     * Plays the setup on target invocation when predicate returns true otherwise the setup will be ignored.\r\n     * As predicate {@link PlayTimes} could be used.\r\n     */\r\n    play(predicate: IPlayable): IPresetBuilder<T, TValue>;\r\n\r\n    /**\r\n     * Replicates interactions with original object.\r\n     * The mock object keeps tracking all interactions and reflects them on the original object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * const value = 2;\r\n     *\r\n     * class Origin {\r\n     *   public property = value;\r\n     *}\r\n     *\r\n     * const origin = new Origin();\r\n     * const mock = new Mock<Origin>()\r\n     * .setup(() => It.IsAny())\r\n     * .mimics(origin);\r\n     *\r\n     * const actual = mock.object().property;\r\n     * expect(actual).toBe(2);\r\n     * ```\r\n     */\r\n    mimics(origin: T): IMock<T>;\r\n}\r\n\r\n/**\r\n * The main API of the framework.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n *  const value = 'value';\r\n *  const object = new Mock<Function>()\r\n *  .setup(instance => instance(1))\r\n *  .returns(value)\r\n *  .object();\r\n *\r\n *  const actual = object(1);\r\n *\r\n *  expect(actual).toBe(value);\r\n * ```\r\n * ---\r\n * #### Latest setups have more precedence over earlier setups.\r\n * @example\r\n * ```typescript\r\n *\r\n *  const object = new Mock<Function>()\r\n *  .setup(instance => instance(1))\r\n *  .returns(1)\r\n *  .setup(instance => instance(1))\r\n *  .returns(2)\r\n *  .object();\r\n *\r\n *  const actual = object(1);\r\n *\r\n *  expect(actual).toBe(2);\r\n * ```\r\n *\r\n * @param T The type of mocked object. Could be any type including:\r\n * - Function,\r\n * - arrow function,\r\n * - interface,\r\n * - class,\r\n * - object and etc.\r\n */\r\nexport interface IMock<T> {\r\n    /**\r\n     * You can name the mock. The name will be displayed with any relative output, so you can easily distinct\r\n     * output of several mocks. On the mocked object you can find this name at 'mockName' property of the [[Handler]].\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Returns the tracker object that responsible for storing history of interactions with the mocked object.\r\n     */\r\n    readonly tracker: Tracker;\r\n\r\n    /**\r\n     * Returns options object\r\n     */\r\n    readonly options: IMockOptions<T>;\r\n\r\n    /**\r\n     * Returns instance of mocked object\r\n     */\r\n    object(): T;\r\n\r\n    /**\r\n     * Defines a configuration for particular interaction with the mocked object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * // a function invoke with 1 as parameter\r\n     * .setup(instance => instance(1))\r\n     *\r\n     * // apply function invoke on a function with null as the first parameter and a placeholder for the second parameter\r\n     * .setup(instance => instance.apply(null, It.IsAny()))\r\n     *\r\n     * // accessing to a property\r\n     * .setup(instance => instance.property)\r\n     *\r\n     * //accessing to a named function with name 'test' of an object and the first parameter is 1\r\n     * .setup(instance => It.Is((expression: ExpectedNamedMethodExpression) => {\r\n     *      return expression.name === 'test' && expression.args[0] === 1\r\n     * }))\r\n     *\r\n     * //setting propertyA to value of 'a'\r\n     * .setup(instance => {instance.propertyA = 'a'})\r\n     * ```\r\n     * @param expression A function that accepts a\r\n     * [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\r\n     * and either plays expected interaction or returns a predicate function.\r\n     * Refer {@link It} class for parameter placeholders or predicate functions.\r\n     * Refer the integration tests for more examples.\r\n     * @returns PresetBuilder config interface for the provided expression.\r\n     */\r\n    setup<E extends IExpectedExpression<T>,\r\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R>;\r\n\r\n    /**\r\n     * Asserts expected interactions with the mocked object.\r\n     *\r\n     * @param expression Expected expression\r\n     * @param times The default value is {@link Times.Once}\r\n     */\r\n    verify(expression: IExpectedExpression<T>, times?: Times): IMock<T>;\r\n\r\n    /**\r\n     * Set the prototype of the mocked object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *  class PrototypeClass {}\r\n     *\r\n     *  const mock = new Mock<{}>();\r\n     *  const object = mock.object();\r\n     *\r\n     *  Object.setPrototypeOf(object, PrototypeClass.prototype);\r\n     *\r\n     *  expect(object instanceof PrototypeClass).toBe(true);\r\n     * ```\r\n     */\r\n    prototypeof(prototype?: any): IMock<T>;\r\n\r\n    /**\r\n     * @experimental\r\n     * @hidden\r\n     */\r\n    insequence(sequence: ISequenceVerifier, expression: IExpectedExpression<T>): IMock<T>;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * @experimental\r\n */\r\nexport interface ISequenceVerifier {\r\n    add<T>(mock: IMock<T>, expression: IExpectedExpression<T>): ISequenceVerifier;\r\n\r\n    verify(times?: Times): void;\r\n}\r\n\r\n/**\r\n * A mock object exposes a symbol property to access to its Moq API.\r\n * This property is read only and trackable.\r\n * Since this property makes sense only in context of the moq library\r\n * and is not specific for mocked types it is not possible to define an interaction behaviour with Setup API.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n *  const mock = new Mock<() => void>()\r\n *  .object();\r\n *\r\n *  mock[MoqAPI]\r\n *  .setup(instance => instance())\r\n *  .returns(12);\r\n *\r\n *  const actual = mock();\r\n *\r\n *  expect(actual).toBe(12);\r\n * ```\r\n */\r\nexport const MoqAPI = Symbol(\"MoqAPI\");\r\n\r\n\r\n/**\r\n * The Mock internally depends on angular based injector to construct its dependencies.\r\n */\r\nexport interface IInjectorConfig {\r\n    /**\r\n     * Returns array of StaticProviders to construct an angular based injector.\r\n     *\r\n     * @param options The final version of mock options. Options that passed to Mock constructor are merged with\r\n     * the global mock options ({@link Mock.options}). Some components depend on the options and the injector\r\n     * should be able to resolve it. To configure the injector property the implementation could do the following:\r\n     * ``` typescript\r\n     * return [\r\n     *  {provide: MOCK_OPTIONS, useValue: options, deps: []},\r\n     * ];\r\n     * ```\r\n     * @param providers An array of additional providers that could be added to the final configuration.\r\n     */\r\n    get(options: IMockOptions<unknown>, ...providers: StaticProvider[]): StaticProvider[];\r\n}\r\n\r\n/**\r\n * Mock instance options.\r\n * Could be passed as parameter on mock instantiating or could be set globally on {@link Mock.options}.\r\n */\r\nexport interface IMockOptions<T> {\r\n    /**\r\n     * You can name the mock. The name will be displayed with any relative output, so you can easily distinct\r\n     * output of several mocks. On the mocked object you can find this name at 'mockName' property of the [[Handler]].\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The target object for Proxy that is used under the hood.\r\n     * typeof operation is applied to this target.\r\n     * The default value is a function.\r\n     */\r\n    target?: T;\r\n    /**\r\n     * The Mock internally based on angular injector to construct its dependencies.\r\n     * An instance of {@link IInjectorConfig} implementation could be passed as parameter in order to\r\n     * changed the mock behaviour. The default value is an instance of {@link DefaultInjectorConfig}.\r\n     * There is also {@link EqualMatchingInjectorConfig} that would setup Mock to use equal logic for comparing values.\r\n     */\r\n    injectorConfig?: IInjectorConfig;\r\n}\r\n","/*eslint @typescript-eslint/naming-convention: \"off\"*/\nexport type IPredicate<T> = (instance: T) => boolean;\n\n/**\n * This class allows to express wide range of cases in an expression.\n * You can use it with setups or verifies methods.\n *\n * @example\n * ```typescript\n *\n *  const value = 'value';\n *  const object = new Mock<Function>()\n *  .setup(instance => instance(1))\n *  .returns(value)\n *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))\n *  .returns(value)\n *  .setup(instance => instance(It.IsAny())\n *  .returns(value)\n *  .object();\n *\n *  const actual = object(1);\n *\n *  expect(actual).toBe(value);\n * ```\n *\n * This class could be used not only for args matching, but also for function names, property names and so on.\n *\n * @example\n * ```typescript\n *\n * const object = new Mock<ITestObject>()\n * // the expression dynamically checks the property name that is being read\n * .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property'))\n * .returns(value)\n * .object();\n *\n * const object = new Mock<ITestObject>()\n * //denis any write operation on the property\n * .setup(instance => { instance.property = It.IsAny()})\n * // true - allow, false - deny\n * .returns(false)\n * .object();\n *\n * const object = new Mock<ITestObject>()\n * .setup(instance => It.Is((expression: ExpectedNamedMethodExpression) => expression.name === 'methodName' && expression.args[0] === 1))\n * .returns(value)\n * .object();\n *\n * // how to use with verify\n * mock.verify(instance => instance.method(It.Is(a => a === 2)));\n * ```\n */\nexport class It<P> {\n    constructor(public predicate: IPredicate<P>) {\n\n    }\n\n    /**\n     * This factory method returns an expression that matches custom cases.\n     *\n     * @example\n     * ```typescript\n     *\n     *  const value = 'value';\n     *  const object = new Mock<Function>()\n     *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))\n     *  .returns(value)\n     *  .object();\n     *\n     *  const actual = object(only_values_between_0_and_2_will_trigger_the_setup);\n     *\n     *  expect(actual).toBe(value);\n     * ```\n     */\n    public static Is<T>(predicate: IPredicate<T>): It<T> | any {\n        return new It(predicate);\n    }\n\n    /**\n     * This factory method returns a wildcat expression that matches any value.\n     *\n     * @example\n     * ```typescript\n     *\n     *  const value = 'value';\n     *  const object = new Mock<Function>()\n     *  .setup(instance => instance(It.IsAny())\n     *  .returns(value)\n     *  .object();\n     *\n     *  const actual = object(any_value_will_trigger_the_setup);\n     *\n     *  expect(actual).toBe(value);\n     * ```\n     */\n    public static IsAny<T>(): It<T> | any {\n        return new It(() => true);\n    }\n\n    /**\n     * @hidden\n     */\n    public test(instance?: P): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","/*eslint-disable max-classes-per-file*/\nexport abstract class Interaction {\n    protected constructor(\n        public readonly name: PropertyKey,\n        public readonly args: any[]) {\n\n    }\n}\n\n/**\n * This class represents an invocation of a named function.\n * It provides access to the name of function and list of parameters.\n */\nexport class NamedMethodInteraction extends Interaction {\n    constructor(name: PropertyKey,\n                args: any[]) {\n        super(name, args);\n    }\n}\n\n/**\n * This class represents an invocation of a function.\n * It provides access to the list of parameters.\n */\nexport class MethodInteraction extends Interaction {\n    constructor(args: any[]) {\n        super(undefined, args);\n    }\n}\n\n/**\n * This class represents a property accessing.\n * It provides access to the name of property.\n */\nexport class GetPropertyInteraction extends Interaction {\n    constructor(name: PropertyKey) {\n        super(name, undefined);\n    }\n}\n\n/**\n * This class represents a property write interaction.\n * It provides access to the name of property and the value.\n */\nexport class SetPropertyInteraction extends Interaction {\n    constructor(name: PropertyKey,\n                public readonly value: any) {\n        super(name, [value]);\n    }\n}\n\n/**\n * This class represents applying of [in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).\n * It provides access to the name of property.\n */\nexport class InOperatorInteraction extends Interaction {\n    constructor(name: PropertyKey) {\n        super(name, undefined);\n    }\n}\n","/*eslint-disable max-classes-per-file*/\nimport { It } from \"./expression-predicates\";\nimport {\n    GetPropertyInteraction,\n    InOperatorInteraction,\n    MethodInteraction,\n    NamedMethodInteraction,\n    SetPropertyInteraction\n} from \"../interactions\";\n\n// todo: check if could be renamed in expressions\n/**\n * See {@link NamedMethodInteraction}\n */\nexport class ExpectedNamedMethodExpression extends NamedMethodInteraction {\n\n}\n\n/**\n * See {@link MethodInteraction}\n */\nexport class ExpectedMethodExpression extends MethodInteraction {\n\n}\n\n/**\n * See {@link GetPropertyInteraction}\n */\nexport class ExpectedGetPropertyExpression extends GetPropertyInteraction {\n\n}\n\n/**\n * See {@link SetPropertyInteraction}\n */\nexport class ExpectedSetPropertyExpression extends SetPropertyInteraction {\n\n}\n\n/**\n * See {@link InOperatorInteraction}\n */\nexport class ExpectedInOperatorExpression extends InOperatorInteraction {\n\n}\n\n/**\n * This types are special sub types of expressions that are used in an expectation context.\n */\nexport type ExpectedExpressions<T> =\n    ExpectedMethodExpression\n    | ExpectedGetPropertyExpression\n    | ExpectedSetPropertyExpression\n    | ExpectedInOperatorExpression\n    | ExpectedNamedMethodExpression\n    | It<T>;\n","import { It } from \"./expression-predicates\";\r\nimport {\r\n    ExpectedExpressions,\r\n    ExpectedGetPropertyExpression,\r\n    ExpectedInOperatorExpression,\r\n    ExpectedMethodExpression,\r\n    ExpectedNamedMethodExpression,\r\n    ExpectedSetPropertyExpression\r\n} from \"./expected-expressions\";\r\n\r\n/**\r\n * A function that accepts a [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\r\n * and either plays expected interaction or returns a predicate function.\r\n * See {@link IMock.setup} function and {@link It} class for more details.\r\n */\r\nexport type IExpectedExpression<T> = (instance: T) => void | any | It<T>;\r\n\r\n/**\r\n * This class reflects an expression to an expression tree representation.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n * const arg = 'argument';\r\n * const reflector = new ExpectedExpressionReflector();\r\n * const actual = reflector.reflect<any>(instance => instance(arg));\r\n *\r\n * const expected = new ExpectedMethodExpression([arg]);\r\n * expect(actual).toEqual(expected);\r\n * ```\r\n *\r\n * For more examples check\r\n * [unit tests for this class]\r\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/tests.unit/expected-expressions/expected-expression-reflector.UnitTests.ts)\r\n */\r\nexport class ExpectedExpressionReflector {\r\n\r\n    private reflectedInfo;\r\n\r\n    /**\r\n     * Reflects the provided code as an expression tree.\r\n     */\r\n    public reflect<T>(expression: IExpectedExpression<T>): ExpectedExpressions<T> {\r\n        this.reflectedInfo = undefined;\r\n\r\n        const proxy = this.expressionProxy();\r\n        const predicate = expression(proxy);\r\n\r\n        return predicate instanceof It && (this.reflectedInfo instanceof ExpectedSetPropertyExpression) === false\r\n            ? predicate : this.reflectedInfo;\r\n    }\r\n\r\n    private expressionProxy(): any {\r\n\r\n        const options = {\r\n            get: (target, name) => {\r\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\r\n                return (...args) => {\r\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\r\n                };\r\n            },\r\n\r\n            set: (target, name, value) => {\r\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\r\n                return true;\r\n            },\r\n\r\n            apply: (target, thisArg, args) => {\r\n                this.reflectedInfo = new ExpectedMethodExpression(args);\r\n            },\r\n\r\n            has: (target, name) => {\r\n                this.reflectedInfo = new ExpectedInOperatorExpression(name);\r\n                return true;\r\n            }\r\n        };\r\n\r\n        return new Proxy(() => undefined, options);\r\n    }\r\n}\r\n","import { GetTrap } from \"./get.trap\";\nimport { SetTrap } from \"./set.trap\";\nimport { ApplyTrap } from \"./apply.trap\";\nimport { GetPrototypeOfTrap } from \"./get-prototype-of.trap\";\nimport { SetPrototypeOfTrap } from \"./set-prototype-of.trap\";\nimport { HasTrap } from \"./has.trap\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { TypeofInjectionToken } from \"../typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class ProxyFactory<T> {\n    private _proxy: T;\n\n    constructor(private options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n                private getTrap: GetTrap,\n                private setTrap: SetTrap,\n                private hasTrap: HasTrap,\n                private applyTrap: ApplyTrap,\n                private getPrototypeOfTrap: GetPrototypeOfTrap,\n                private setPrototypeOfTrap: SetPrototypeOfTrap) {\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => this.getTrap.intercept(name),\n            set: (target, name, value) => this.setTrap.intercept(target, name, value),\n            has: (target, name) => this.hasTrap.intercept(name),\n            apply: (target, thisArg, args) => this.applyTrap.intercept(target, thisArg, args),\n            getPrototypeOf: () => this.getPrototypeOfTrap.intercept(),\n            setPrototypeOf: (target, prototype) => this.setPrototypeOfTrap.intercept(prototype)\n        };\n\n        if (this.options.name) {\n            options[\"mockName\"] = this.options.name;\n        }\n\n        return new Proxy(this.options.target, options);\n    }\n}\n","/**\n * Sets the rules where bounds of a range are included or excluded from the range.\n * See {@link Times.Between}\n */\nexport enum Range {\n    Exclusive,\n    Inclusive\n}\n\n/**\n * This class expresses the expectation about amount of invocations.\n *\n * @example\n * ```typescript\n *\n * const times = new Times(expected => expected === 1, `Should be called once`);\n * const actual = times.test(2);\n *\n * expect(actual).toBe(false);\n * expect(times.message).toBe(`Should be called once`);\n * ```\n *\n * ```typescript\n *\n * const mockName = 'mock name';\n *const mock = new Mock<ITestObject>(mockName);\n *const object = mock.object();\n *\n *object.property;\n *\n *const action = () => mock.verify(instance => instance.property, Times.AtLeast(2));\n *\n *expect(action).toThrow();\n * ```\n */\nexport class Times {\n    private static _once: Times = new Times(expected => expected === 1, \"Should be called once\");\n    private static _never: Times = new Times(expected => expected === 0, \"Should be called never\");\n    private static _atMostOnce: Times = new Times(expected => expected <= 1, \"Should be called at most once\");\n    private static _atLeastOnce: Times = new Times(expected => expected >= 1, \"Should be called at least once\");\n\n    /**\n     *\n     * @param evaluator It takes actual value and decides if it is expected or not.\n     * Returns true or false accordingly.\n     * @param message A message that describes the expectation.\n     */\n    constructor(private evaluator: (callCount: number) => boolean,\n                public message: string) {\n\n    }\n\n    /**\n     * It expects that the actual would be equal or bigger then the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual would be equal or bigger then 1.\n     */\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    /**\n     * It expects that the actual would be equal or smaller then the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected <= callCount, `Should be called at most ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual would be equal or less then 1.\n     */\n    public static AtMostOnce(): Times {\n        return Times._atMostOnce;\n    }\n\n    /**\n     * It expects that the actual would be in the expected range of values.\n     *\n     * @param callCountFrom The lowest bound of the range.\n     * @param callCountTo The highest bound of the range.\n     * @param range  Sets the rules where bounds of a range are included or excluded from the range.\n     */\n    public static Between(callCountFrom: number, callCountTo: number, range: Range): Times {\n        if (range === Range.Exclusive) {\n            return new Times(\n                expected => expected > callCountFrom && expected < callCountTo,\n                `Should be called exclusively between ${callCountFrom} and ${callCountTo}`);\n        }\n\n        return new Times(\n            expected => expected >= callCountFrom && expected <= callCountTo,\n            `Should be called inclusively between ${callCountFrom} and ${callCountTo}`);\n    }\n\n    /**\n     * It expects that the actual is equal to the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static Exactly(callCount: number): Times {\n        return new Times(\n            expected => expected === callCount,\n            `Should be called exactly ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual is equal 0.\n     */\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    /**\n     * It expects that the actual is equal 1.\n     */\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    /**\n     * Evaluates the expectation against the actual value.\n     *\n     * @param callCount The actual value.\n     */\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n","import { GetPropertyInteraction, MethodInteraction, SetPropertyInteraction } from \"../interactions\";\nimport { SequenceId } from \"./sequence-id\";\n\n/**\n * This class represents a recorded interaction with the a mocked object.\n */\nexport interface TrackedAction {\n    id: number;\n    expression: MethodInteraction | GetPropertyInteraction | SetPropertyInteraction;\n}\n\n/**\n * This class records all interactions with a mocked object.\n */\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    /**\n     * @hidden\n     */\n    public add(action: MethodInteraction | GetPropertyInteraction | SetPropertyInteraction): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    /**\n     * Returns recorded interactions.\n     */\n    public get(): TrackedAction[] {\n        return [...this.log];\n    }\n}\n","export class VerifyError extends Error {\n    constructor(message: string) {\n        super(message);\n    }\n}\n","import { Times } from \"../times\";\nimport { Interaction } from \"../interactions\";\nimport {\n    ExpectedExpressionReflector,\n    IExpectedExpression\n} from \"../expected-expressions/expected-expression-reflector\";\nimport { CallCounter } from \"./call-counter\";\nimport { VerifyFormatter } from \"../formatters/verify-formatter\";\nimport { VerifyError } from \"./verify-error\";\n\n/**\n * @hidden\n */\nexport class Verifier<T> {\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter) {\n\n    }\n\n    public test(expected: IExpectedExpression<T>, times: Times, expressions: Interaction[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n","/**\n * @hidden\n */\n\nexport class PrototypeStorage {\n    private prototype: any = null;\n\n    constructor(mockTarget: any) {\n        this.prototype = mockTarget?.prototype ?? mockTarget;\n    }\n\n    public get(): any {\n        return this.prototype;\n    }\n\n    public set(prototype: any): void {\n        this.prototype = prototype;\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function stringify(token: any): string {\n    if (typeof token === \"string\") {\n        return token;\n    }\n\n    if (Array.isArray(token)) {\n        return `[${token.map(stringify).join(\", \")}]`;\n    }\n\n    if (token == null) {\n        return `${  token}`;\n    }\n\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n\n    if (token.name) {\n        return `${token.name}`;\n    }\n\n    const res = token.toString();\n\n    if (res == null) {\n        return `${  res}`;\n    }\n\n    const newLineIndex = res.indexOf(\"\\n\");\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (const key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error(\"Could not find renamed property on target object.\");\n}\n","/* eslint-disable */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Type } from \"./type\";\nimport { stringify } from \"./stringify\";\nimport { getClosureSafeProperty } from \"./property\";\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport type ForwardRefFn = () => any;\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n    (<any>forwardRefFn).__forward_ref__ = forwardRef;\n    (<any>forwardRefFn).toString = function () {\n        return stringify(this());\n    };\n    return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n    return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is() => any {\n    return typeof fn === \"function\" && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef;\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class InjectionToken<T> {\n    constructor(protected desc: string) {\n    }\n\n    toString(): string {\n        return `InjectionToken ${this.desc}`;\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from \"./injection_token\";\nimport { Injector } from \"./injector\";\nimport { ValueProvider } from \"./interface/provider\";\nimport { getClosureSafeProperty } from \"./property\";\nimport { stringify } from \"./stringify\";\n\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    \"INJECTOR\"\n);\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nexport const NG_TEMP_TOKEN_PATH = \"ngTempTokenPath\";\nconst NG_TOKEN_PATH = \"ngTokenPath\";\nconst NEW_LINE = /\\n/gm;\nexport const NO_NEW_LINE = \"ɵ\";\nexport const SOURCE = \"__source\";\n\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nexport class NullInjector implements Injector {\n    get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = \"NullInjectorError\";\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n\n\nexport function catchInjectorError(\n    e: any, token: any, injectorErrorName: string, source: string | null): never {\n    const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError(`\\n${e.message}`, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\n\nexport function formatError(\n    text: string, obj: any, injectorErrorName: string, source: string | null = null): string {\n    text = text && text.charAt(0) === \"\\n\" && text.charAt(1) === NO_NEW_LINE ? text.substr(2) : text;\n    let context = stringify(obj);\n    if (Array.isArray(obj)) {\n        context = obj.map(stringify).join(\" -> \");\n    } else if (typeof obj === \"object\") {\n        const parts = <string[]>[];\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                const value = obj[key];\n                parts.push(\n                    `${key}:${typeof value === \"string\" ? JSON.stringify(value) : stringify(value)}`);\n            }\n        }\n        context = `{${parts.join(\", \")}}`;\n    }\n    return `${injectorErrorName}${source ? `(${source})` : \"\"}[${context}]: ${\n        text.replace(NEW_LINE, \"\\n  \")}`;\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n\n    /** Check self and check parent injector if needed */\n    Default = 0b0000,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host = 0b0001,\n    /** Don't ascend to ancestors of the node requesting injection. */\n    Self = 0b0010,\n    /** Skip the node that is requesting injection. */\n    SkipSelf = 0b0100,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional = 0b1000,\n}\n","/* eslint-disable */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type of the Optional metadata.\n */\nexport class Optional {\n\n}\n\n/**\n * Type of the Self metadata.\n */\nexport class Self {\n\n}\n\n/**\n * Type of the SkipSelf metadata.\n */\nexport class SkipSelf {\n\n}\n\n/**\n * Type of the Host metadata.\n */\nexport class Host {\n\n}\n\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { resolveForwardRef } from \"./forward_ref\";\nimport { InjectionToken } from \"./injection_token\";\nimport {\n    catchInjectorError,\n    formatError,\n    INJECTOR,\n    NG_TEMP_TOKEN_PATH, NO_NEW_LINE,\n    NullInjector,\n    THROW_IF_NOT_FOUND,\n    USE_VALUE\n} from \"./injector_compatibility\";\nimport { InjectFlags } from \"./interface/injector\";\nimport {\n    ConstructorProvider,\n    ExistingProvider,\n    FactoryProvider,\n    StaticClassProvider,\n    StaticProvider,\n    ValueProvider\n} from \"./interface/provider\";\nimport { Optional, Self, SkipSelf } from \"./metadata\";\nimport { AbstractType, Type } from \"./type\";\nimport { stringify } from \"./stringify\";\n\nexport const INJECTOR_IMPL = (\n    providers: StaticProvider[], parent: Injector | undefined, name: string) => new StaticInjector(providers, parent, name);\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n    static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n    static NULL: Injector = new NullInjector();\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = -1;\n\n    /**\n     * Creates a new injector instance that provides one or more dependencies,\n     * according to a given type or types of `StaticProvider`.\n     *\n     * @param options An object with the following properties:\n     * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n     * * `parent`: (optional) A parent injector.\n     * * `name`: (optional) A developer-defined identifying name for the new injector.\n     *\n     * @returns The new injector instance.\n     *\n     */\n    static create(options: { providers: StaticProvider[]; parent?: Injector; name?: string }): Injector;\n\n    static create(\n        options: StaticProvider[] | { providers: StaticProvider[]; parent?: Injector; name?: string },\n        parent?: Injector): Injector {\n        if (Array.isArray(options)) {\n            return INJECTOR_IMPL(options, parent, \"\");\n        } else {\n            return INJECTOR_IMPL(options.providers, options.parent, options.name || \"\");\n        }\n    }\n\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     *\n     * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     */\n    abstract get<T>(\n        token: Type<T> | InjectionToken<T> | AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n}\n\n\nconst IDENT = function <T>(value: T): T {\n    return value;\n};\nconst EMPTY = <any[]>[];\nconst CIRCULAR = IDENT;\nconst MULTI_PROVIDER_FN = function (): any[] {\n    return Array.prototype.slice.call(arguments);\n};\n\nconst enum OptionFlags {\n    Optional = 1,\n    CheckSelf = 2,\n    CheckParent = 4,\n    // eslint-disable-next-line no-bitwise\n    Default = CheckSelf | CheckParent\n}\n\nexport class StaticInjector implements Injector {\n    readonly parent: Injector;\n    readonly source: string | null;\n    readonly scope: string | null;\n\n    private _records: Map<any, Record | null>;\n\n    constructor(\n        providers: StaticProvider[], parent = new NullInjector(), source: string | null = null) {\n        this.parent = parent;\n        this.source = source;\n        const records = this._records = new Map<any, Record>();\n        records.set(Injector, <Record>{token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n        records.set(INJECTOR, <Record>{token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n        this.scope = recursivelyProcessProviders(records, providers);\n    }\n\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    get(token: any, notFoundValue?: any): any;\n    get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n        const records = this._records;\n        const record = records.get(token);\n        if (record === undefined) {\n            records.set(token, null);\n        }\n        try {\n            return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\n        } catch (e) {\n            return catchInjectorError(e, token, \"StaticInjectorError\", this.source);\n        }\n    }\n\n    toString() {\n        const tokens = <string[]>[]; const records = this._records;\n        records.forEach((v, token) => tokens.push(stringify(token)));\n        return `StaticInjector[${tokens.join(\", \")}]`;\n    }\n}\n\ntype SupportedProvider =\n    ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider;\n\ninterface Record {\n    fn: Function;\n    useNew: boolean;\n    deps: DependencyRecord[];\n    value: any;\n}\n\ninterface DependencyRecord {\n    token: any;\n    options: number;\n}\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n    const deps = computeDeps(provider);\n    let fn: Function = IDENT;\n    let value: any = EMPTY;\n    let useNew = false;\n    const provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (provider as ValueProvider).useValue;\n    } else if ((provider as FactoryProvider).useFactory) {\n        fn = (provider as FactoryProvider).useFactory;\n    } else if ((provider as ExistingProvider).useExisting) {\n        // Just use IDENT\n    } else if ((provider as StaticClassProvider).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n    } else if (typeof provide === \"function\") {\n        useNew = true;\n        fn = provide;\n    } else {\n        throw staticError(\n            \"StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable\",\n            provider);\n    }\n    return {deps, fn, useNew, value};\n}\n\nfunction multiProviderMixError(token: any) {\n    return staticError(\"Cannot mix multi providers and regular providers\", token);\n}\n\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string |\n    null {\n    let scope: string | null = null;\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (Array.isArray(provider)) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                scope = recursivelyProcessProviders(records, provider[i]) || scope;\n            }\n        } else if (typeof provider === \"function\") {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError(\"Function/Class not supported\", provider);\n        } else if (provider && typeof provider === \"object\" && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            let token = resolveForwardRef(provider.provide);\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                let multiProvider: Record | undefined = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                } else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = <Record>{\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    });\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({token, options: OptionFlags.Default});\n            }\n            const record = records.get(token);\n            if (record && record.fn === MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        } else {\n            throw staticError(\"Unexpected provider\", provider);\n        }\n    }\n    return scope;\n}\n\nfunction tryResolveToken(\n    token: any, record: Record | undefined | null, records: Map<any, Record | null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    } catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value === CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n\nfunction resolveToken(\n    token: any, record: Record | undefined | null, records: Map<any, Record | null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n    let value;\n    // eslint-disable-next-line no-bitwise\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value === CIRCULAR) {\n            throw Error(`${NO_NEW_LINE  }Circular dependency`);\n        } else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            const {useNew, fn, deps: depRecords} = record;\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    const depRecord: DependencyRecord = depRecords[i];\n                    const options = depRecord.options;\n                    // eslint-disable-next-line no-bitwise\n                    const childRecord = options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                        // Current Token to resolve\n                        depRecord.token,\n                        // A record which describes how to resolve the token.\n                        // If undefined, this means we don't have such a record\n                        childRecord,\n                        // Other records we know about.\n                        records,\n                        // If we don't know how to resolve dependency and we should not check parent for it,\n                        // than pass in Null injector.\n                        // eslint-disable-next-line no-bitwise\n                        !childRecord && !(options & OptionFlags.CheckParent) ? Injector.NULL : parent,\n                        // eslint-disable-next-line no-bitwise\n                        options & OptionFlags.Optional ? null : Injector.THROW_IF_NOT_FOUND,\n                        InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(undefined, deps);\n        }\n        // eslint-disable-next-line no-bitwise\n    } else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n        // eslint-disable-next-line no-bitwise\n    } else if (!(flags & InjectFlags.Optional)) {\n        value = Injector.NULL.get(token, notFoundValue);\n    } else {\n        value = Injector.NULL.get(token, typeof notFoundValue !== \"undefined\" ? notFoundValue : null);\n    }\n    return value;\n}\n\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n    let deps: DependencyRecord[] = EMPTY;\n    const providerDeps: any[] =\n        (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            let options = OptionFlags.Default;\n            let token = resolveForwardRef(providerDeps[i]);\n            if (Array.isArray(token)) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation === Optional) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options | OptionFlags.Optional;\n                    } else if (annotation instanceof SkipSelf || annotation === SkipSelf) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options & ~OptionFlags.CheckSelf;\n                    } else if (annotation instanceof Self || annotation === Self) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options & ~OptionFlags.CheckParent;\n                    } else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({token, options});\n        }\n    } else if ((provider as ExistingProvider).useExisting) {\n        const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n        deps = [{token, options: OptionFlags.Default}];\n    } else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError(\"'deps' required\", provider);\n    }\n    return deps;\n}\n\nfunction staticError(text: string, obj: any): Error {\n    return new Error(formatError(text, obj, \"StaticInjectorError\"));\n}\n","import { IMockOptions } from \"../moq\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { Injector } from \"../static.injector/injector\";\n\n/**\n * Creates an angular based injector\n */\nexport function injectorFactory<T>(options: IMockOptions<T>, ...providers: StaticProvider[]) {\n    const {injectorConfig} = options;\n    if (injectorConfig) {\n        return Injector.create({providers: injectorConfig.get(options, providers)});\n    }\n    throw new Error(\"injectorConfig is not defined\");\n}\n\n","import { IMock } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const MOCK = new InjectionToken<IMock<unknown>>(\"IMock\");\n","import { IMockOptions } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const MOCK_OPTIONS = new InjectionToken<IMockOptions<any>>(\"mock options\");\n","import { ExpectedExpressions } from \"../expected-expressions/expected-expressions\";\nimport { PresetBuilder } from \"./preset-builder\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const PRESET_BUILDER_FACTORY = new InjectionToken<<T>(target: ExpectedExpressions<T>) => PresetBuilder<T>>(\"PRESET_BUILDER_FACTORY\");\n","/**\n * @hidden\n */\nexport class SequenceId {\n    private value = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n","import { SequenceId } from \"./sequence-id\";\nimport { Tracker } from \"./tracker\";\n\n/**\n * @hidden\n */\nexport const trackerProviders = [\n    {provide: SequenceId, useClass: SequenceId, deps: []},\n    {provide: Tracker, useClass: Tracker, deps: [SequenceId]}\n];\n","/**\n * @hidden\n */\nimport { ExpectedExpressionReflector } from \"./expected-expression-reflector\";\n\nexport const reflectorProviders = [\n    {provide: ExpectedExpressionReflector, useClass: ExpectedExpressionReflector, deps: []}\n];\n","import { IPreset } from \"./preset\";\nimport { ExpectedExpressions } from \"../../expected-expressions/expected-expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class MimicsPreset<T> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: ExpectedExpressions<T>,\n        public readonly origin: unknown) {\n\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { ExpectedExpressions } from \"../../expected-expressions/expected-expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class ReturnsPreset<T, TValue> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: ExpectedExpressions<T>,\n        public readonly value: TValue) {\n\n    }\n}\n\n","import { IPreset } from \"./preset\";\nimport { ExpectedExpressions } from \"../../expected-expressions/expected-expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class ThrowsPreset<T, TException> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: ExpectedExpressions<T>,\n        public readonly exception: TException) {\n\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { ExpectedExpressions } from \"../../expected-expressions/expected-expressions\";\nimport { Interaction } from \"../../interactions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class CallbacksPreset<T> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: ExpectedExpressions<T>,\n        public readonly callback: (interaction: Interaction) => unknown) {\n\n    }\n}\n","import { IPlayable, PlayableUpdateReason } from \"../moq\";\n\n/**\n * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.\n */\nexport class PlayableExactly implements IPlayable {\n    private invoked = 0;\n\n    constructor(private count: number) {\n    }\n\n    readonly update = (reason: PlayableUpdateReason) => {\n        if (reason === PlayableUpdateReason.OwnSetupWouldBePlayed) {\n            this.invoked++;\n        }\n    };\n\n    readonly isPlayable = () => this.invoked <= this.count;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be never applied to invocations.\n */\nexport class PlayableNever implements IPlayable {\n    readonly update = () => undefined;\n    readonly isPlayable = () => false;\n}\n","import { IPlayable, PlayableUpdateReason } from \"../moq\";\n\n/**\n * The configured setup will be applied only to the first invocation.\n */\nexport class PlayableOnce implements IPlayable {\n    private played = false;\n\n    readonly update = (reason: PlayableUpdateReason) => {\n        if (reason === PlayableUpdateReason.OwnSetupWouldBePlayed) {\n            this.played = true;\n        }\n    };\n\n    readonly isPlayable = () => this.played === false;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be always applied to invocations.\n */\nexport class PlayableAlways implements IPlayable {\n    readonly isPlayable = () => true;\n    readonly update = () => undefined;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be applied or not accordingly to the value in the sequence.\n *\n * @example\n * ```typescript\n *\n * const value = 'value';\n * const object = new Mock<Function>()\n * .setup(instance => instance(1))\n * .play(PlayTimes.Sequence([false, true]))\n * .returns(value)\n * .object();\n *\n * expect(object(1).toBe(undefined);\n * expect(object(1).toBe(value);\n * expect(object(1).toBe(undefined);\n * ```\n */\nexport class PlayableSequence implements IPlayable {\n    private index = 0;\n\n    constructor(private sequence: boolean[]) {\n    }\n\n    readonly update = () => {\n        this.index++;\n    };\n\n    readonly isPlayable = () => {\n        if (this.index >= this.sequence.length) return false;\n        return this.sequence[this.index];\n    };\n}\n","import { IPlayable } from \"../moq\";\nimport { PlayableExactly } from \"./playable-exactly\";\nimport { PlayableNever } from \"./playable-never\";\nimport { PlayableOnce } from \"./playable-once\";\nimport { PlayableAlways } from \"./playable-always\";\nimport { PlayableSequence } from \"./playable-sequence\";\n\n\n/**\n * This class sets rules when a configured setup should be applied to the target invocation or not.\n *\n * @example\n * ```typescript\n *\n * const value = 'value';\n * const object = new Mock<Function>()\n * .setup(instance => instance(1))\n * .play(PlayTimes.Once())\n * .returns(value)\n * .object();\n *\n * expect(object(1).toBe(value);\n * expect(object(1).toBe(undefined);\n * ```\n */\nexport class PlayTimes {\n    private static readonly always = new PlayableAlways();\n    private static readonly never = new PlayableNever();\n\n    /**\n     * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.\n     */\n    public static Exactly(count: number): IPlayable {\n        return new PlayableExactly(count);\n    }\n\n    /**\n     * The configured setup will be always applied to invocations.\n     */\n    public static Always(): IPlayable {\n        return PlayTimes.always;\n    }\n\n    /**\n     * The configured setup will be never applied to invocations.\n     */\n    public static Never(): IPlayable {\n        return PlayTimes.never;\n    }\n\n    /**\n     * The configured setup will be applied only to the first invocation.\n     */\n    public static Once(): IPlayable {\n        return new PlayableOnce();\n    }\n\n    /**\n     * The configured setup will be applied or not accordingly to the value in the sequence.\n     *\n     * @example\n     * ```typescript\n     *\n     * const value = 'value';\n     * const object = new Mock<Function>()\n     * .setup(instance => instance(1))\n     * .play(PlayTimes.Sequence([false, true]))\n     * .returns(value)\n     * .object();\n     *\n     * expect(object(1).toBe(undefined);\n     * expect(object(1).toBe(value);\n     * expect(object(1).toBe(undefined);\n     * ```\n     */\n    public static Sequence(sequence: boolean[]): IPlayable {\n        return new PlayableSequence(sequence);\n    }\n}\n","import { IMock, IPlayable, IPresetBuilder } from \"../moq\";\nimport { ExpectedExpressions } from \"../expected-expressions/expected-expressions\";\nimport { IPreset } from \"./presets/preset\";\nimport { MimicsPreset } from \"./presets/mimics.preset\";\nimport { ReturnsPreset } from \"./presets/returns.preset\";\nimport { ThrowsPreset } from \"./presets/throws.preset\";\nimport { CallbacksPreset } from \"./presets/callbacks.preset\";\nimport { Interaction } from \"../interactions\";\nimport { PlayTimes } from \"../playables/play-times\";\n\n/**\n * The default implementation of {@link IPresetBuilder} interface.\n * Is it not intended to be used outside of the moq library.\n *\n * @hidden\n */\nexport class PresetBuilder<T, TValue = any> implements IPresetBuilder<T> {\n\n    constructor(\n        private mock: IMock<T>,\n        private set: (preset: IPreset<T>) => void,\n        private target: ExpectedExpressions<T>,\n        private playable: IPlayable = PlayTimes.Always()) {\n\n    }\n\n    public mimics(origin: T): IMock<T> {\n        const preset = new MimicsPreset(this.playable, this.target, origin);\n        this.set(preset);\n        return this.mock;\n    }\n\n    public returns(value: TValue): IMock<T> {\n        const preset = new ReturnsPreset(this.playable, this.target, value);\n        this.set(preset);\n        return this.mock;\n    }\n\n    public throws<TException>(exception: TException): IMock<T> {\n        const preset = new ThrowsPreset(this.playable, this.target, exception);\n        this.set(preset);\n        return this.mock;\n    }\n\n    public callback(callback: (interaction: Interaction) => TValue): IMock<T> {\n        const preset = new CallbacksPreset(this.playable, this.target, callback);\n        this.set(preset);\n        return this.mock;\n    }\n\n    public play(playable: IPlayable): IPresetBuilder<T> {\n        this.playable = playable;\n        return this;\n    }\n}\n","import { IPreset } from \"./presets/preset\";\n\n/**\n * @hidden\n */\nexport class Presets<T> {\n    private presets: IPreset<T>[] = [];\n\n    public add(preset: IPreset<T>): void {\n        this.presets.unshift(preset);\n    }\n\n    public get(): IPreset<T>[] {\n        return [...this.presets];\n    }\n}\n","import { ExpectedExpressions } from \"../expected-expressions/expected-expressions\";\nimport { PresetBuilder } from \"./preset-builder\";\nimport { Presets } from \"./presets\";\nimport { MOCK } from \"../injector/moq.injection-token\";\nimport { PRESET_BUILDER_FACTORY } from \"./preset-builder-factory.injection-token\";\n\n/**\n * @hidden\n */\nexport const presetsProviders = [\n    {provide: Presets, useClass: Presets, deps: []},\n    {\n        provide: PRESET_BUILDER_FACTORY, useFactory: (mock, presets) => <T>(target: ExpectedExpressions<T>) =>\n            new PresetBuilder<T>(mock, preset => presets.add(preset), target), deps: [MOCK, Presets]\n    }\n];\n","import { ExpectedExpressions } from \"../expected-expressions/expected-expressions\";\nimport { Interaction } from \"../interactions\";\nimport { ExpressionMatcher } from \"../expression-matchers/expression.matcher\";\n\n/**\n * @hidden\n */\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count<T>(expected: ExpectedExpressions<T>, expressions: Interaction[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true) {\n                count += 1;\n            }\n        }\n\n        return count;\n    }\n}\n","import { ExpectedExpressions } from \"../expected-expressions/expected-expressions\";\r\nimport { Interaction } from \"../interactions\";\r\nimport { ExpectedExpressionFormatter } from \"./expected-expression-formatter\";\r\nimport { TrackedExpressionsFormatter } from \"./tracked-expressions-formatter\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class VerifyFormatter {\r\n\r\n    constructor(\r\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\r\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\r\n    }\r\n\r\n    public format(\r\n        expected: ExpectedExpressions<any>,\r\n        timesMessage: string,\r\n        haveBeenCalledTimes: number,\r\n        trackedExpressions: Interaction[],\r\n        mockName?: string): string {\r\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\r\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\r\n        const delimiter = \"-------------------------------------\";\r\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`;\r\n    }\r\n}\r\n","import { GetPropertyExpressionMatcher } from \"./get-property.matcher\";\nimport { SetPropertyExpressionMatcher } from \"./set-property.matcher\";\nimport { MethodExpressionMatcher } from \"./method.matcher\";\nimport { NamedMethodExpressionMatcher } from \"./instance-method.matcher\";\nimport {\n    GetPropertyInteraction,\n    InOperatorInteraction,\n    Interaction,\n    MethodInteraction,\n    NamedMethodInteraction,\n    SetPropertyInteraction\n} from \"../interactions\";\nimport {\n    ExpectedExpressions,\n    ExpectedGetPropertyExpression,\n    ExpectedInOperatorExpression,\n    ExpectedMethodExpression,\n    ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression\n} from \"../expected-expressions/expected-expressions\";\nimport { It } from \"../expected-expressions/expression-predicates\";\nimport { InOperatorMatcher } from \"./in-operator.matcher\";\n\n/**\n * @hidden\n */\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher,\n                private inOperatorExpressionMatcher: InOperatorMatcher) {\n\n    }\n\n    public matched(left: Interaction, right: ExpectedExpressions<any>): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyInteraction && (right instanceof ExpectedGetPropertyExpression || right instanceof It)) {\n            return this.getPropertyExpressionMatcher.matched(left, right);\n        }\n        if (left instanceof SetPropertyInteraction && (right instanceof ExpectedSetPropertyExpression || right instanceof It)) {\n            return this.setPropertyExpressionMatcher.matched(left, right);\n        }\n        if (left instanceof InOperatorInteraction && (right instanceof ExpectedInOperatorExpression || right instanceof It)) {\n            return this.inOperatorExpressionMatcher.matched(left, right);\n        }\n        if (left instanceof MethodInteraction && (right instanceof ExpectedMethodExpression || right instanceof It)) {\n            return this.methodExpressionMatcher.matched(left, right);\n        }\n        if (left instanceof NamedMethodInteraction && (right instanceof ExpectedNamedMethodExpression || right instanceof It)) {\n            return this.namedMethodExpressionMatcher.matched(left, right);\n        }\n\n        return false;\n    }\n}\n","/**\n * @hidden\n */\nimport { Verifier } from \"./verifier\";\nimport { CallCounter } from \"./call-counter\";\nimport { VerifyFormatter } from \"../formatters/verify-formatter\";\nimport { ExpectedExpressionReflector } from \"../expected-expressions/expected-expression-reflector\";\nimport { ExpressionMatcher } from \"../expression-matchers/expression.matcher\";\n\nexport const verificationProviders = [\n    {provide: Verifier, useClass: Verifier, deps: [ExpectedExpressionReflector, CallCounter, VerifyFormatter]},\n    {provide: CallCounter, useClass: CallCounter, deps: [ExpressionMatcher]},\n];\n","import { Tracker } from \"../tracker/tracker\";\nimport { MethodInteraction } from \"../interactions\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\n\n/**\n * @hidden\n */\nexport class ApplyTrap {\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public intercept(target: any, thisArg: any, argArray?: any): any {\n        const expression = new MethodInteraction(argArray);\n\n        this.tracker.add(expression);\n\n        return this.interactionPlayer.play(expression);\n    }\n}\n","import { Interaction } from \"../interactions\";\nimport { PlayablePresetProvider } from \"./playable-preset.provider\";\nimport { PresetPlayer } from \"./preset.player\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\n\n/**\n * @hidden\n */\nexport class InteractionPlayer {\n    constructor(\n        private playablePresetProvider: PlayablePresetProvider,\n        private presetPlayablesUpdater: PresetPlayablesUpdater,\n        private presetPlayer: PresetPlayer) {\n\n    }\n\n    public play(interaction: Interaction): any {\n        const preset = this.playablePresetProvider.get(interaction);\n        this.presetPlayablesUpdater.update(interaction, preset);\n        if (preset === undefined) return undefined;\n        return this.presetPlayer.play(preset, interaction);\n    }\n}\n","import { GetPropertyInteraction } from \"../interactions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { SpyFunctionProvider } from \"./spy-function.provider\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { MoqAPI } from \"../moq\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { TypeofInjectionToken } from \"../typeof-injection-token\";\nimport { MOCK } from \"../injector/moq.injection-token\";\n\n/**\n * @hidden\n */\nexport class GetTrap {\n    constructor(\n        private mock: TypeofInjectionToken<typeof MOCK>,\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private hasPropertyExplorer: HasPropertyExplorer,\n        private hasMethodExplorer: HasMethodExplorer,\n        private spyFunctionProvider: SpyFunctionProvider) {\n\n    }\n\n    public intercept(property: PropertyKey): any {\n        const interaction = new GetPropertyInteraction(property);\n\n        this.tracker.add(interaction);\n\n        if (property === MoqAPI) {\n            return this.mock;\n        }\n\n        if (this.propertiesValueStorage.has(property)) {\n            return this.propertiesValueStorage.get(property);\n        }\n\n        if (this.hasPropertyExplorer.has(property)) {\n            return this.interactionPlayer.play(interaction);\n        }\n\n        if (this.hasMethodExplorer.has(property)) {\n            return this.spyFunctionProvider.get(property);\n        }\n\n        return this.interactionPlayer.play(interaction);\n    }\n}\n","export class PropertiesValueStorage {\n    private storage = new Map<PropertyKey, any>();\n\n    public has(property: PropertyKey): boolean {\n        return this.storage.has(property);\n    }\n\n    public get(property: PropertyKey): any {\n        return this.storage.get(property);\n    }\n\n    public set(property: PropertyKey, value: any): void {\n        this.storage.set(property, value);\n    }\n}\n","import { PresetHasPropertyExplorer } from \"./preset-has-property.explorer\";\nimport { Presets } from \"../../presets/presets\";\nimport { MembersPropertyExplorer } from \"../members.explorer/members-property.explorer\";\n\n/**\n * @hidden\n */\nexport class HasPropertyExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private membersExplorer: MembersPropertyExplorer,\n        private explorer: PresetHasPropertyExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        if (this.membersExplorer.hasProperty(name)) {\n            return true;\n        }\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { PresetHasMethodExplorer } from \"./preset.has-method.explorer\";\nimport { Presets } from \"../../presets/presets\";\nimport { MembersMethodExplorer } from \"../members.explorer/members-method.explorer\";\n\n/**\n * @hidden\n */\nexport class HasMethodExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private membersExplorer: MembersMethodExplorer,\n        private explorer: PresetHasMethodExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        if (this.membersExplorer.hasMethod(name)) {\n            return true;\n        }\n\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { NamedMethodInteraction } from \"../interactions\";\n\n/**\n * @hidden\n */\nexport class SpyFunctionProvider {\n    private map = new Map<PropertyKey, (...args) => any>();\n\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public get(property: PropertyKey): (...args) => any {\n        if (this.map.has(property) === false) {\n            this.map.set(property, (...args): any => {\n                const interaction = new NamedMethodInteraction(property, args);\n                this.tracker.add(interaction);\n                return this.interactionPlayer.play(interaction);\n            });\n        }\n        return this.map.get(property);\n    }\n}\n","import { PrototypeStorage } from \"./prototype.storage\";\n\n/**\n * @hidden\n */\nexport class GetPrototypeOfTrap {\n    constructor(\n        private prototypeStorage: PrototypeStorage) {\n\n    }\n\n    public intercept(): any {\n        return this.prototypeStorage.get();\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { InOperatorInteraction } from \"../interactions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { InOperatorInteractionExplorer } from \"../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\n\n/**\n * @hidden\n */\nexport class HasTrap {\n    constructor(\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private inOperatorInteractionExplorer: InOperatorInteractionExplorer,\n        private hasPropertyExplorer: HasPropertyExplorer,\n        private hasMethodExplorer: HasMethodExplorer,\n        private presetPlayablesUpdater: PresetPlayablesUpdater) {\n\n    }\n\n    public intercept(property: PropertyKey): any {\n        const interaction = new InOperatorInteraction(property);\n        this.tracker.add(interaction);\n\n        if (this.propertiesValueStorage.has(property)) {\n            return true;\n        }\n\n        if (this.inOperatorInteractionExplorer.has(property)) {\n            return this.interactionPlayer.play(interaction);\n        }\n\n        this.presetPlayablesUpdater.update(interaction, undefined);\n\n        if (this.hasPropertyExplorer.has(property)) {\n            return true;\n        }\n\n        if (this.hasMethodExplorer.has(property)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { PresetHasInOperatorExplorer } from \"./preset.has-in-operator.explorer\";\nimport { Presets } from \"../../presets/presets\";\n\n/**\n * @hidden\n */\nexport class InOperatorInteractionExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private explorer: PresetHasInOperatorExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Interaction } from \"../interactions\";\nimport { ExpressionMatcher } from \"../expression-matchers/expression.matcher\";\nimport { Presets } from \"../presets/presets\";\nimport { PlayableUpdateReason } from \"../moq\";\n\n/**\n * @hidden\n */\nexport class PresetPlayablesUpdater {\n\n    constructor(\n        private presets: Presets<unknown>,\n        private matcher: ExpressionMatcher) {\n\n    }\n\n    public update(interaction: Interaction, playable: IPreset<unknown>) {\n        for (const preset of this.presets.get()) {\n            const {target, playable: {update}} = preset;\n            if (this.matcher.matched(interaction, target)) {\n                const reason = preset === playable ?\n                    PlayableUpdateReason.OwnSetupWouldBePlayed :\n                    PlayableUpdateReason.OtherSetupWouldBePlayed;\n                update(reason);\n            }\n        }\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { SetPropertyInteraction } from \"../interactions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { MoqAPI } from \"../moq\";\nimport { PropertyIsReadOnlyTester } from \"../explorers/has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport class SetTrap {\n    constructor(\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private propertyIsReadOnlyTester: PropertyIsReadOnlyTester) {\n\n    }\n\n    public intercept(target: any, property: PropertyKey, value: any): boolean {\n        const expression = new SetPropertyInteraction(property, value);\n\n        this.tracker.add(expression);\n\n        if (property === MoqAPI) {\n            return false;\n        }\n\n        if (this.propertyIsReadOnlyTester.isReadOnly(property) === true) {\n            return false;\n        }\n\n        const accepted = this.interactionPlayer.play(expression);\n        if (accepted === true || accepted === undefined) {\n            this.propertiesValueStorage.set(property, value);\n        }\n\n        return accepted === undefined ? true : accepted;\n    }\n}\n","import { PrototypeStorage } from \"./prototype.storage\";\n\n/**\n * @hidden\n */\nexport class SetPrototypeOfTrap {\n    constructor(\n        private prototypeStorage: PrototypeStorage) {\n\n    }\n\n    public intercept(prototype: any): any {\n        if (prototype !== undefined) {\n            this.prototypeStorage.set(prototype);\n            return true;\n        }\n        return false;\n\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"../members.explorer/property-descriptor.provider\";\nimport { TypeofInjectionToken } from \"../../typeof-injection-token\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\n\n/**\n * @hidden\n */\nexport class PropertyIsReadOnlyTester {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public isReadOnly(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.get instanceof Function && descriptor.set === undefined || descriptor.writable === false;\n        }\n        return false;\n    }\n}\n","import { ApplyTrap } from \"./apply.trap\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { GetTrap } from \"./get.trap\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { SpyFunctionProvider } from \"./spy-function.provider\";\nimport { GetPrototypeOfTrap } from \"./get-prototype-of.trap\";\nimport { PrototypeStorage } from \"./prototype.storage\";\nimport { HasTrap } from \"./has.trap\";\nimport { InOperatorInteractionExplorer } from \"../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\nimport { SetTrap } from \"./set.trap\";\nimport { SetPrototypeOfTrap } from \"./set-prototype-of.trap\";\nimport { ProxyFactory } from \"./proxy.factory\";\nimport { MOCK } from \"../injector/moq.injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { PropertyIsReadOnlyTester } from \"../explorers/has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport const interceptorsProviders = [\n    {\n        provide: ProxyFactory, useClass: ProxyFactory, deps: [\n            MOCK_OPTIONS,\n            GetTrap,\n            SetTrap,\n            HasTrap,\n            ApplyTrap,\n            GetPrototypeOfTrap,\n            SetPrototypeOfTrap\n        ]\n    },\n    {provide: ApplyTrap, useClass: ApplyTrap, deps: [Tracker, InteractionPlayer]},\n    {\n        provide: GetTrap, useClass: GetTrap, deps: [\n            MOCK,\n            Tracker,\n            PropertiesValueStorage,\n            InteractionPlayer,\n            HasPropertyExplorer,\n            HasMethodExplorer,\n            SpyFunctionProvider\n        ]\n    },\n    {provide: GetPrototypeOfTrap, useClass: GetPrototypeOfTrap, deps: [PrototypeStorage]},\n    {\n        provide: HasTrap, useClass: HasTrap, deps: [\n            Tracker,\n            PropertiesValueStorage,\n            InteractionPlayer,\n            InOperatorInteractionExplorer,\n            HasPropertyExplorer,\n            HasMethodExplorer,\n            PresetPlayablesUpdater\n        ]\n    },\n    {provide: PropertiesValueStorage, useClass: PropertiesValueStorage, deps: []},\n    {provide: PrototypeStorage, useFactory: ({target}) => new PrototypeStorage(target), deps: [MOCK_OPTIONS]},\n    {provide: SetTrap, useClass: SetTrap, deps: [Tracker, PropertiesValueStorage, InteractionPlayer, PropertyIsReadOnlyTester]},\n    {provide: SetPrototypeOfTrap, useClass: SetPrototypeOfTrap, deps: [PrototypeStorage]},\n    {provide: SpyFunctionProvider, useClass: SpyFunctionProvider, deps: [Tracker, InteractionPlayer]},\n];\n","import { PresetPlayablesUpdater } from \"./preset-playables.updater\";\nimport { Presets } from \"../presets/presets\";\nimport { ExpressionMatcher } from \"../expression-matchers/expression.matcher\";\n\n/**\n * @hidden\n */\nexport const playablesProviders = [\n    {provide: PresetPlayablesUpdater, useClass: PresetPlayablesUpdater, deps: [Presets, ExpressionMatcher]}\n];\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Interaction } from \"../interactions\";\nimport { ReturnsPreset } from \"../presets/presets/returns.preset\";\nimport { CallbackPresetPlayer } from \"./callback-preset.player\";\nimport { CallbacksPreset } from \"../presets/presets/callbacks.preset\";\nimport { ThrowsPreset } from \"../presets/presets/throws.preset\";\nimport { MimicsPresetPlayer } from \"./mimics-preset.player\";\nimport { MimicsPreset } from \"../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetPlayer {\n    constructor(\n        private callbackPresetPlayer: CallbackPresetPlayer,\n        private mimicsPresetPlayer: MimicsPresetPlayer) {\n\n    }\n\n    public play<T>(preset: IPreset<T>, interaction: Interaction): any {\n        if (preset instanceof ReturnsPreset) {\n            return preset.value;\n        }\n        if (preset instanceof CallbacksPreset) {\n            return this.callbackPresetPlayer.play(preset.callback, interaction);\n        }\n        if (preset instanceof MimicsPreset) {\n            return this.mimicsPresetPlayer.play(preset.origin, interaction);\n        }\n        if (preset instanceof ThrowsPreset) {\n            throw preset.exception;\n        }\n    }\n}\n","import { Interaction } from \"../interactions\";\n\n/**\n * @hidden\n */\nexport class CallbackPresetPlayer {\n    public play<TValue>(callback: (interaction: Interaction) => TValue, interaction: Interaction): any {\n        return callback.apply(undefined, [interaction]);\n    }\n}\n","import {\n    GetPropertyInteraction,\n    InOperatorInteraction,\n    Interaction,\n    MethodInteraction,\n    NamedMethodInteraction,\n    SetPropertyInteraction\n} from \"../interactions\";\nimport { REFLECT_APPLY } from \"./reflect-apply.injection-token\";\nimport { TypeofInjectionToken } from \"../typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MimicsPresetPlayer {\n    constructor(\n        private apply: TypeofInjectionToken<typeof REFLECT_APPLY>) {\n\n    }\n\n    public play(origin: any, interaction: Interaction): any {\n        if (interaction instanceof GetPropertyInteraction) {\n            return origin[interaction.name];\n        }\n        if (interaction instanceof SetPropertyInteraction) {\n            origin[interaction.name] = interaction.value;\n            return true;\n        }\n        if (interaction instanceof NamedMethodInteraction) {\n            const method = origin[interaction.name];\n            return this.apply(method, origin, interaction.args);\n        }\n        if (interaction instanceof MethodInteraction) {\n            return this.apply(origin, undefined, interaction.args);\n        }\n        if (interaction instanceof InOperatorInteraction) {\n            return interaction.name in origin;\n        }\n\n    }\n}\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Interaction } from \"../interactions\";\nimport { ExpressionMatcher } from \"../expression-matchers/expression.matcher\";\nimport { Presets } from \"../presets/presets\";\n\n/**\n * @hidden\n */\nexport class PlayablePresetProvider {\n\n    constructor(\n        private presets: Presets<unknown>,\n        private matcher: ExpressionMatcher) {\n\n    }\n\n    public get(interaction: Interaction): IPreset<unknown> | undefined {\n        for (const preset of this.presets.get()) {\n            const {target, playable: {isPlayable}} = preset;\n            if (this.matcher.matched(interaction, target) && isPlayable() === true) {\n                return preset;\n            }\n        }\n    }\n}\n","import { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const REFLECT_APPLY = new InjectionToken<typeof Reflect.apply>(\"Reflect Apply\");\n","import { PresetPlayer } from \"./preset.player\";\nimport { CallbackPresetPlayer } from \"./callback-preset.player\";\nimport { MimicsPresetPlayer } from \"./mimics-preset.player\";\nimport { PlayablePresetProvider } from \"./playable-preset.provider\";\nimport { Presets } from \"../presets/presets\";\nimport { ExpressionMatcher } from \"../expression-matchers/expression.matcher\";\nimport { InteractionPlayer } from \"./interaction.player\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\nimport { REFLECT_APPLY } from \"./reflect-apply.injection-token\";\n\n/**\n * @hidden\n */\nexport const interactionPlayersProviders = [\n    {provide: REFLECT_APPLY, useValue: Reflect.apply, deps: []},\n    {provide: PresetPlayer, useClass: PresetPlayer, deps: [CallbackPresetPlayer, MimicsPresetPlayer]},\n    {provide: PlayablePresetProvider, useClass: PlayablePresetProvider, deps: [Presets, ExpressionMatcher]},\n    {provide: MimicsPresetPlayer, useClass: MimicsPresetPlayer, deps: [REFLECT_APPLY]},\n    {\n        provide: InteractionPlayer,\n        useClass: InteractionPlayer,\n        deps: [PlayablePresetProvider, PresetPlayablesUpdater, PresetPlayer]\n    },\n    {provide: CallbackPresetPlayer, useClass: CallbackPresetPlayer, deps: []},\n];\n","import { ExpectedExpressions } from \"../expected-expressions/expected-expressions\";\r\nimport { ExpressionFormatter } from \"./expression-formatter\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ExpectedExpressionFormatter {\r\n\r\n    constructor(private expressionFormatter: ExpressionFormatter) {\r\n\r\n    }\r\n\r\n    public format(expected: ExpectedExpressions<any>, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\r\n        const expressionDescription = this.expressionFormatter.format(expected);\r\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : \"\";\r\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\r\n    }\r\n}\r\n","import { ExpressionFormatter } from \"./expression-formatter\";\r\nimport { Interaction } from \"../interactions\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TrackedExpressionsFormatter {\r\n\r\n    constructor(private expressionFormatter: ExpressionFormatter) {\r\n\r\n    }\r\n\r\n    public format(trackedExpressions: Interaction[]): string {\r\n        let result = \"\";\r\n        for (const expression of trackedExpressions) {\r\n            result += `${this.expressionFormatter.format(expression)}\\n`;\r\n        }\r\n\r\n        return result.substr(0, result.length - 1);\r\n    }\r\n}\r\n","import {\n    GetPropertyInteraction,\n    InOperatorInteraction,\n    Interaction,\n    MethodInteraction,\n    NamedMethodInteraction,\n    SetPropertyInteraction\n} from \"../interactions\";\nimport { It } from \"../expected-expressions/expression-predicates\";\nimport { GetPropertyExpressionFormatter } from \"./get.property-formatter\";\nimport { SetPropertyExpressionFormatter } from \"./set.property-formatter\";\nimport { MethodExpressionFormatter } from \"./method-formatter\";\nimport { NamedMethodExpressionFormatter } from \"./named.method-formatter\";\nimport { ConstantFormatter } from \"./constant-formatter\";\nimport { InOperatorFormatter } from \"./in-operator.formatter\";\n\n/**\n * @hidden\n */\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter,\n                private inOperatorFormatter: InOperatorFormatter) {\n\n    }\n\n    public format(expression: Interaction | It<any>): string {\n        if (expression instanceof GetPropertyInteraction) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyInteraction) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof InOperatorInteraction) return this.inOperatorFormatter.format(expression);\n        if (expression instanceof MethodInteraction) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodInteraction) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n","import { SetPropertyInteraction } from \"../interactions\";\nimport { ConstantFormatter } from \"./constant-formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class SetPropertyExpressionFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter,\n                private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: SetPropertyInteraction): string {\n        const value = this.constantFormatter.format(expression.value);\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `Assignment of ${value} to property \\'${propertyKey}\\'`;\n    }\n}\n","import { It } from \"../expected-expressions/expression-predicates\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ConstantFormatter {\r\n\r\n    public format(object: any | It<any>): string {\r\n        if (object instanceof It) return `It.Is(${(object as It<any>).predicate})`;\r\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\r\n        if (object instanceof Array) {\r\n            const description = [];\r\n            for (const index of Object.keys(object)) {\r\n                description.push(new ConstantFormatter().format(object[index]));\r\n            }\r\n\r\n            return `[${description}]`;\r\n        }\r\n        return `${object}`;\r\n    }\r\n}\r\n\r\n","/**\n * @hidden\n */\nexport class PropertyKeyFormatter {\n    public format(property: PropertyKey): string {\n        return String(property);\n    }\n}\n","import { NamedMethodInteraction } from \"../interactions\";\r\nimport { ConstantFormatter } from \"./constant-formatter\";\r\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class NamedMethodExpressionFormatter {\r\n\r\n    constructor(private constantFormatter: ConstantFormatter,\r\n                private propertyKeyFormatter: PropertyKeyFormatter) {\r\n\r\n    }\r\n\r\n    public format(expression: NamedMethodInteraction): string {\r\n        const formatted: string[] = [];\r\n\r\n        expression.args.forEach(arg => {\r\n            formatted.push(this.constantFormatter.format(arg));\r\n        });\r\n\r\n        const value = formatted.join(\", \");\r\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\r\n        return `${propertyKey}(${value})`;\r\n    }\r\n}\r\n","import { MethodInteraction } from \"../interactions\";\r\nimport { ConstantFormatter } from \"./constant-formatter\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MethodExpressionFormatter {\r\n\r\n    constructor(private constantFormatter: ConstantFormatter) {\r\n\r\n    }\r\n\r\n    public format(expression: MethodInteraction): string {\r\n        const value = this.constantFormatter.format(expression.args);\r\n        return `(${value})`;\r\n    }\r\n}\r\n","import { InOperatorInteraction } from \"../interactions\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class InOperatorFormatter {\n    constructor(private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: InOperatorInteraction): string {\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `In operator for \\'${propertyKey}\\'`;\n    }\n}\n","import { GetPropertyInteraction } from \"../interactions\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class GetPropertyExpressionFormatter {\n    constructor(private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: GetPropertyInteraction): string {\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `Getter of \\'${propertyKey}\\'`;\n    }\n}\n","import { VerifyFormatter } from \"./verify-formatter\";\nimport { ExpectedExpressionFormatter } from \"./expected-expression-formatter\";\nimport { TrackedExpressionsFormatter } from \"./tracked-expressions-formatter\";\nimport { ExpressionFormatter } from \"./expression-formatter\";\nimport { SetPropertyExpressionFormatter } from \"./set.property-formatter\";\nimport { ConstantFormatter } from \"./constant-formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\nimport { NamedMethodExpressionFormatter } from \"./named.method-formatter\";\nimport { MethodExpressionFormatter } from \"./method-formatter\";\nimport { InOperatorFormatter } from \"./in-operator.formatter\";\nimport { GetPropertyExpressionFormatter } from \"./get.property-formatter\";\n\n/**\n * @hidden\n */\nexport const formattersProviders = [\n    {\n        provide: VerifyFormatter,\n        useClass: VerifyFormatter,\n        deps: [ExpectedExpressionFormatter, TrackedExpressionsFormatter]\n    },\n    {provide: TrackedExpressionsFormatter, useClass: TrackedExpressionsFormatter, deps: [ExpressionFormatter]},\n    {\n        provide: SetPropertyExpressionFormatter,\n        useClass: SetPropertyExpressionFormatter,\n        deps: [ConstantFormatter, PropertyKeyFormatter]\n    },\n    {provide: PropertyKeyFormatter, useClass: PropertyKeyFormatter, deps: []},\n    {\n        provide: NamedMethodExpressionFormatter,\n        useClass: NamedMethodExpressionFormatter,\n        deps: [ConstantFormatter, PropertyKeyFormatter]\n    },\n    {provide: MethodExpressionFormatter, useClass: MethodExpressionFormatter, deps: [ConstantFormatter]},\n    {provide: InOperatorFormatter, useClass: InOperatorFormatter, deps: [PropertyKeyFormatter]},\n    {provide: GetPropertyExpressionFormatter, useClass: GetPropertyExpressionFormatter, deps: [PropertyKeyFormatter]},\n    {\n        provide: ExpressionFormatter,\n        useClass: ExpressionFormatter,\n        deps: [\n            GetPropertyExpressionFormatter,\n            SetPropertyExpressionFormatter,\n            MethodExpressionFormatter,\n            NamedMethodExpressionFormatter,\n            ConstantFormatter,\n            InOperatorFormatter\n        ]\n    },\n    {provide: ExpectedExpressionFormatter, useClass: ExpectedExpressionFormatter, deps: [ExpressionFormatter]},\n    {provide: ConstantFormatter, useClass: ConstantFormatter, deps: []},\n];\n","import { ExpectedSetPropertyExpression } from \"../expected-expressions/expected-expressions\";\nimport { SetPropertyInteraction } from \"../interactions\";\nimport { It } from \"../expected-expressions/expression-predicates\";\nimport { ConstantMatcher } from \"./constant.matcher\";\n\n/**\n * @hidden\n */\nexport class SetPropertyExpressionMatcher {\n\n    constructor(private constantMatcher: ConstantMatcher) {\n\n    }\n\n    public matched(left: SetPropertyInteraction, right: ExpectedSetPropertyExpression | It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n","import { It } from \"../expected-expressions/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class ConstantMatcher {\n    public matched(left: any, right: any | It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n        return left === right;\n    }\n}\n\n","import { ArgumentsMatcher } from \"./arguments.matcher\";\nimport { NamedMethodInteraction } from \"../interactions\";\nimport { ExpectedNamedMethodExpression } from \"../expected-expressions/expected-expressions\";\nimport { It } from \"../expected-expressions/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class NamedMethodExpressionMatcher {\n\n    constructor(private argumentsMatcher: ArgumentsMatcher) {\n\n    }\n\n    public matched(left: NamedMethodInteraction, right: ExpectedNamedMethodExpression | It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name) {\n            return this.argumentsMatcher.matched(left.args, rightExpression.args);\n        }\n\n        return false;\n    }\n}\n","import { It } from \"../expected-expressions/expression-predicates\";\nimport { ConstantMatcher } from \"./constant.matcher\";\n\n/**\n * @hidden\n */\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher) {\n\n    }\n\n    public matched(left: any[], right: (any | It<any>)[]): boolean {\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        for (let i = 0; i < left.length; i++) {\n            const lvalue = left[i];\n            const rvalue = right[i];\n            if (this.constantMatcher.matched(lvalue, rvalue) === false) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { ArgumentsMatcher } from \"./arguments.matcher\";\nimport { MethodInteraction } from \"../interactions\";\nimport { ExpectedMethodExpression } from \"../expected-expressions/expected-expressions\";\nimport { It } from \"../expected-expressions/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class MethodExpressionMatcher {\n\n    constructor(private argumentsMatcher: ArgumentsMatcher) {\n\n    }\n\n    public matched(left: MethodInteraction, right: ExpectedMethodExpression|It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.args, rightExpression.args);\n\n    }\n}\n","import { InOperatorInteraction } from \"../interactions\";\nimport { It } from \"../expected-expressions/expression-predicates\";\nimport { ExpectedInOperatorExpression } from \"../expected-expressions/expected-expressions\";\n\n/**\n * @hidden\n */\nexport class InOperatorMatcher {\n\n    public matched(left: InOperatorInteraction, right: ExpectedInOperatorExpression | It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n\n        const rightExpression = right as ExpectedInOperatorExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n","import {GetPropertyInteraction} from \"../interactions\";\nimport {It} from \"../expected-expressions/expression-predicates\";\nimport {ExpectedGetPropertyExpression} from \"../expected-expressions/expected-expressions\";\n\n/**\n * @hidden\n */\nexport class GetPropertyExpressionMatcher {\n\n    public matched(left: GetPropertyInteraction, right: ExpectedGetPropertyExpression|It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n","import { SetPropertyExpressionMatcher } from \"./set-property.matcher\";\nimport { ConstantMatcher } from \"./constant.matcher\";\nimport { NamedMethodExpressionMatcher } from \"./instance-method.matcher\";\nimport { ArgumentsMatcher } from \"./arguments.matcher\";\nimport { MethodExpressionMatcher } from \"./method.matcher\";\nimport { InOperatorMatcher } from \"./in-operator.matcher\";\nimport { GetPropertyExpressionMatcher } from \"./get-property.matcher\";\nimport { ExpressionMatcher } from \"./expression.matcher\";\n\n/**\n * @hidden\n */\nexport const expressionMatchersProviders = [\n    {\n        provide: ExpressionMatcher,\n        useClass: ExpressionMatcher,\n        deps: [\n            GetPropertyExpressionMatcher,\n            SetPropertyExpressionMatcher,\n            MethodExpressionMatcher,\n            NamedMethodExpressionMatcher,\n            InOperatorMatcher\n        ]\n    },\n    {provide: SetPropertyExpressionMatcher, useClass: SetPropertyExpressionMatcher, deps: [ConstantMatcher]},\n    {provide: NamedMethodExpressionMatcher, useClass: NamedMethodExpressionMatcher, deps: [ArgumentsMatcher]},\n    {provide: MethodExpressionMatcher, useClass: MethodExpressionMatcher, deps: [ArgumentsMatcher]},\n    {provide: InOperatorMatcher, useClass: InOperatorMatcher, deps: []},\n    {provide: GetPropertyExpressionMatcher, useClass: GetPropertyExpressionMatcher, deps: []},\n    {provide: ConstantMatcher, useClass: ConstantMatcher, deps: []},\n    {provide: ArgumentsMatcher, useClass: ArgumentsMatcher, deps: [ConstantMatcher]},\n];\n","import { ExpectedExpressions, ExpectedNamedMethodExpression } from \"../../expected-expressions/expected-expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionHasMethodExplorer {\n    public has(name: PropertyKey, expression: ExpectedExpressions<unknown>): boolean {\n        if (expression instanceof ExpectedNamedMethodExpression) {\n            return expression.name === name;\n        }\n\n        return false;\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./property-descriptor.provider\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\nimport { TypeofInjectionToken } from \"../../typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MembersMethodExplorer {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public hasMethod(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.value instanceof Function;\n        }\n        return false;\n    }\n}\n\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { ExpressionHasMethodExplorer } from \"./expression.has-method.explorer\";\nimport { ObjectHasMethodExplorer } from \"./object.has-method.explorer\";\nimport { MimicsPreset } from \"../../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetHasMethodExplorer {\n    constructor(private expressionHasMethodExplorer: ExpressionHasMethodExplorer,\n                private objectHasMethodExplorer: ObjectHasMethodExplorer) {\n\n    }\n\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        if (preset instanceof MimicsPreset && this.objectHasMethodExplorer.has(name, preset.origin)) {\n            return true;\n        }\n        return this.expressionHasMethodExplorer.has(name, preset.target);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectHasMethodExplorer {\n    public has(name: PropertyKey, target: any): boolean {\n        return target[name] instanceof Function;\n    }\n}\n","import {\n    ExpectedExpressions,\n    ExpectedInOperatorExpression,\n    ExpectedMethodExpression,\n    ExpectedNamedMethodExpression\n} from \"../../expected-expressions/expected-expressions\";\nimport { It } from \"../../expected-expressions/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class ExpressionHasPropertyExplorer {\n    public has(name: PropertyKey, expression: ExpectedExpressions<unknown>): boolean {\n        if (expression instanceof It\n            || expression instanceof ExpectedMethodExpression\n            || expression instanceof ExpectedNamedMethodExpression\n            || expression instanceof ExpectedInOperatorExpression) {\n            return false;\n        }\n\n        return expression.name === name;\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./property-descriptor.provider\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\nimport { TypeofInjectionToken } from \"../../typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MembersPropertyExplorer {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public hasProperty(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.get !== undefined || (descriptor.value instanceof Function) === false;\n        }\n        return false;\n    }\n}\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { ExpressionHasPropertyExplorer } from \"./expression-has-property.explorer\";\nimport { ObjectHasPropertyExplorer } from \"./object-has-property.explorer\";\nimport { MimicsPreset } from \"../../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetHasPropertyExplorer {\n    constructor(private expressionHasPropertyExplorer: ExpressionHasPropertyExplorer,\n                private objectHasPropertyExplorer: ObjectHasPropertyExplorer) {\n\n    }\n\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        if (preset instanceof MimicsPreset && this.objectHasPropertyExplorer.has(name, preset.origin)) {\n            return true;\n        }\n        return this.expressionHasPropertyExplorer.has(name, preset.target);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectHasPropertyExplorer {\n    public has(name: PropertyKey, target: any): boolean {\n        return Reflect.has(target, name) && (target[name] instanceof Function) === false;\n    }\n}\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { InOperatorInteraction } from \"../../interactions\";\nimport { ExpectedInOperatorExpression } from \"../../expected-expressions/expected-expressions\";\nimport { It } from \"../../expected-expressions/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class PresetHasInOperatorExplorer {\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        const {playable: {isPlayable}} = preset;\n\n        if (isPlayable() === false) {\n            return false;\n        }\n\n        if (preset.target instanceof ExpectedInOperatorExpression) {\n            return preset.target.name === name;\n        }\n\n        if (preset.target instanceof It) {\n            return preset.target.test(new InOperatorInteraction(name));\n        }\n\n        return false;\n    }\n}\n","/**\n * @hidden\n */\nexport class PropertyDescriptorProvider {\n    get(target: any, name: PropertyKey) {\n        let prototype = target;\n        while (prototype !== null) {\n            const descriptor = Reflect.getOwnPropertyDescriptor(prototype, name);\n            if (descriptor !== undefined) return descriptor;\n            prototype = Reflect.getPrototypeOf(prototype);\n        }\n    }\n}\n","import { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const REFLECT_HAS = new InjectionToken<typeof Reflect.has>(\"Reflect has\");\n","import { ExpressionHasMethodExplorer } from \"./has-method.explorer/expression.has-method.explorer\";\nimport { HasMethodExplorer } from \"./has-method.explorer/has-method.explorer\";\nimport { Presets } from \"../presets/presets\";\nimport { MembersMethodExplorer } from \"./members.explorer/members-method.explorer\";\nimport { PresetHasMethodExplorer } from \"./has-method.explorer/preset.has-method.explorer\";\nimport { ObjectHasMethodExplorer } from \"./has-method.explorer/object.has-method.explorer\";\nimport { ExpressionHasPropertyExplorer } from \"./has-property.explorer/expression-has-property.explorer\";\nimport { HasPropertyExplorer } from \"./has-property.explorer/has-property.explorer\";\nimport { MembersPropertyExplorer } from \"./members.explorer/members-property.explorer\";\nimport { PresetHasPropertyExplorer } from \"./has-property.explorer/preset-has-property.explorer\";\nimport { ObjectHasPropertyExplorer } from \"./has-property.explorer/object-has-property.explorer\";\nimport { InOperatorInteractionExplorer } from \"./in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetHasInOperatorExplorer } from \"./in-operator-interaction.explorer/preset.has-in-operator.explorer\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./members.explorer/property-descriptor.provider\";\nimport { REFLECT_HAS } from \"./reflect-has.injection-token\";\nimport { PropertyIsReadOnlyTester } from \"./has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport const typeExplorersProviders = [\n    {provide: ExpressionHasMethodExplorer, useClass: ExpressionHasMethodExplorer, deps: []},\n    {\n        provide: HasMethodExplorer,\n        useClass: HasMethodExplorer,\n        deps: [Presets, MembersMethodExplorer, PresetHasMethodExplorer]\n    },\n    {provide: ObjectHasMethodExplorer, useClass: ObjectHasMethodExplorer, deps: []},\n    {\n        provide: PresetHasMethodExplorer,\n        useClass: PresetHasMethodExplorer,\n        deps: [ExpressionHasMethodExplorer, ObjectHasMethodExplorer]\n    },\n    {provide: ExpressionHasPropertyExplorer, useClass: ExpressionHasPropertyExplorer, deps: []},\n    {\n        provide: HasPropertyExplorer,\n        useClass: HasPropertyExplorer,\n        deps: [Presets, MembersPropertyExplorer, PresetHasPropertyExplorer]\n    },\n    {provide: ObjectHasPropertyExplorer, useClass: ObjectHasPropertyExplorer, deps: []},\n    {\n        provide: PresetHasPropertyExplorer,\n        useClass: PresetHasPropertyExplorer,\n        deps: [ExpressionHasPropertyExplorer, ObjectHasPropertyExplorer]\n    },\n    {\n        provide: InOperatorInteractionExplorer,\n        useClass: InOperatorInteractionExplorer,\n        deps: [Presets, PresetHasInOperatorExplorer]\n    },\n    {provide: PresetHasInOperatorExplorer, useClass: PresetHasInOperatorExplorer, deps: []},\n    {\n        provide: MembersMethodExplorer,\n        useClass: MembersMethodExplorer,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {\n        provide: PropertyIsReadOnlyTester,\n        useClass: PropertyIsReadOnlyTester,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {\n        provide: MembersPropertyExplorer,\n        useClass: MembersPropertyExplorer,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {provide: PropertyDescriptorProvider, useClass: PropertyDescriptorProvider, deps: []},\n    {provide: REFLECT_HAS, useValue: Reflect.has, deps: []},\n];\n","import { IMockOptions } from \"../moq\";\n\n/**\n * @hidden\n */\nexport class MockOptionsBuilder {\n    build<T>(options: IMockOptions<T>) {\n        const target = (() => undefined) as unknown as T;\n        return {target, ...options};\n    }\n}\n\n","import { IMockOptions } from \"../moq\";\nimport { MOCK_OPTIONS } from \"./mock-options.injection-token\";\nimport { MockOptionsBuilder } from \"./mock-options.builder\";\n\n/**\n * @hidden\n */\nexport function mockOptionsProviders<T>(options: IMockOptions<T>) {\n    return [\n        {provide: MockOptionsBuilder, useClass: MockOptionsBuilder, deps: []},\n        {provide: MOCK_OPTIONS, useFactory: builder => builder.build(options), deps: [MockOptionsBuilder]},\n    ];\n}\n","import { IInjectorConfig, IMockOptions } from \"../moq\";\nimport { trackerProviders } from \"../tracker/tracker.providers\";\nimport { reflectorProviders } from \"../expected-expressions/reflector.providers\";\nimport { presetsProviders } from \"../presets/presets.providers\";\nimport { verificationProviders } from \"../verification/verification.providers\";\nimport { interceptorsProviders } from \"../interceptors/interceptors.providers\";\nimport { playablesProviders } from \"../playables/playables.providers\";\nimport { interactionPlayersProviders } from \"../interaction-players/interaction-players.providers\";\nimport { formattersProviders } from \"../formatters/formatters.providers\";\nimport { expressionMatchersProviders } from \"../expression-matchers/expression-matchers.providers\";\nimport { typeExplorersProviders } from \"../explorers/type-explorers.providers\";\nimport { mockOptionsProviders } from \"../mock-options/mock-options.providers\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\n\n/**\n * Provides the default configuration for an angular based injector that would be used internally by {@link Mock} instance.\n */\nexport class DefaultInjectorConfig implements IInjectorConfig {\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        return [\n            ...providers,\n            ...mockOptionsProviders(options),\n            ...trackerProviders,\n            ...reflectorProviders,\n            ...presetsProviders,\n            ...verificationProviders,\n            ...interceptorsProviders,\n            ...playablesProviders,\n            ...interactionPlayersProviders,\n            ...formattersProviders,\n            ...expressionMatchersProviders,\n            ...typeExplorersProviders\n        ];\n    }\n}\n","import { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { ProxyFactory } from \"./interceptors/proxy.factory\";\nimport { IMock, IMockOptions, IPresetBuilder, ISequenceVerifier } from \"./moq\";\nimport { Times } from \"./times\";\nimport { Tracker } from \"./tracker/tracker\";\nimport { Verifier } from \"./verification/verifier\";\nimport { ExpectedExpressions } from \"./expected-expressions/expected-expressions\";\nimport { PrototypeStorage } from \"./interceptors/prototype.storage\";\nimport { injectorFactory } from \"./injector/injector.factory\";\nimport { MOCK } from \"./injector/moq.injection-token\";\nimport { MOCK_OPTIONS } from \"./mock-options/mock-options.injection-token\";\nimport { PRESET_BUILDER_FACTORY } from \"./presets/preset-builder-factory.injection-token\";\nimport { DefaultInjectorConfig } from \"./injector/default-injector.config\";\n\n/**\n * The default implementation of {@link IMock} interface.\n */\nexport class Mock<T> implements IMock<T> {\n    private static Options: IMockOptions<unknown> = undefined;\n    public readonly tracker: Tracker;\n    private expressionReflector: ExpectedExpressionReflector;\n    private interceptor: ProxyFactory<T>;\n    private readonly setupFactory: (target: ExpectedExpressions<T>) => IPresetBuilder<T>;\n    private verifier: Verifier<T>;\n    private prototypeStorage: PrototypeStorage;\n\n    constructor(public readonly options: IMockOptions<T> = {}) {\n\n        const preOptions = {...Mock.options, ...options} as IMockOptions<T>;\n        const provider = {provide: MOCK, useValue: this, deps: []};\n\n        const injector = injectorFactory(preOptions, provider);\n\n        this.options = injector.get(MOCK_OPTIONS);\n        this.tracker = injector.get(Tracker);\n        this.expressionReflector = injector.get(ExpectedExpressionReflector);\n        this.interceptor = injector.get(ProxyFactory);\n        this.setupFactory = injector.get(PRESET_BUILDER_FACTORY);\n        this.verifier = injector.get(Verifier);\n        this.prototypeStorage = injector.get(PrototypeStorage);\n    }\n\n    /**\n     * The default mock options that would applied to all instantiating Mock objects.\n     * By default it sets {@link IMockOptions.target} as a function, {@link IMockOptions.injectorConfig} as\n     * instance of {@link DefaultInjectorConfig} and {@link IMockOptions.name} as undefined.\n     * If an options are passed as constructor parameter {@link Mock.constructor} they will override the default options.\n     */\n    static get options() {\n        if (Mock.Options === undefined) {\n            Mock.Options = {\n                target: () => undefined,\n                injectorConfig: new DefaultInjectorConfig()\n            };\n        }\n        return Mock.Options;\n    }\n\n    /**\n     * The default mock options that would applied to all instantiating Mock objects.\n     * If an options are passed as constructor parameter they will override the default options.\n     */\n    static set options(options: IMockOptions<unknown>) {\n        Mock.Options = options;\n    }\n\n    public get name() {\n        return this.options.name;\n    }\n\n    public setup<\n        E extends IExpectedExpression<T>,\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R> {\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        return this.setupFactory(expectedExpression);\n    }\n\n    public verify(expression: IExpectedExpression<T>, times?: Times): IMock<T> {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock<T> {\n        this.prototypeStorage.set(prototype);\n        return this;\n    }\n\n    /**\n     * @experimental\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression<T>): IMock<T> {\n        sequence.add(this, expression);\n        return this;\n    }\n}\n","import { TrackedExpressionsFormatter } from \"./formatters/tracked-expressions-formatter\";\r\nimport { injectorFactory } from \"./injector/injector.factory\";\r\nimport { IMock } from \"./moq\";\r\nimport { MOCK } from \"./injector/moq.injection-token\";\r\n\r\n/**\r\n * This function dumps into console.log all interactions with the mocked object\r\n */\r\nexport function dump<T>(mock: IMock<T>, writer: Console = console): void {\r\n    const injector = injectorFactory(mock.options, {provide: MOCK, useValue: mock, deps: []});\r\n    const formatter = injector.get(TrackedExpressionsFormatter);\r\n    const expressions = mock.tracker.get().map(record => record.expression);\r\n    const output = formatter.format(expressions);\r\n    const delimiter = \"-------------------------------\";\r\n    writer.log(`Dump of ${mock.name === undefined ? \"noname mock\" : mock.name}`);\r\n    writer.log(delimiter);\r\n    writer.log(`\\n${output}`);\r\n    writer.log(delimiter);\r\n}\r\n","import { PrimitiveMatcher } from \"./primitive.matcher\";\nimport { TypesMatcher } from \"./types.matcher\";\nimport { CommonTypeProvider } from \"./common-type.provider\";\nimport { ObjectMatcher } from \"./object.matcher\";\nimport { FunctionMatcher } from \"./function.matcher\";\n\n/**\n * @hidden\n */\nexport class EqualMatcher {\n\n    constructor(\n        private typesMatcher: TypesMatcher,\n        private commonTypeProvider: CommonTypeProvider,\n        private primitiveMatcher: PrimitiveMatcher,\n        private objectMatcher: ObjectMatcher,\n        private functionMatcher: FunctionMatcher) {\n    }\n\n    public matched(left: any, right: any): boolean {\n        if (this.typesMatcher.matched(left, right) === false) {\n            return false;\n        }\n\n        switch (this.commonTypeProvider.ofType(left, right)) {\n            case \"undefined\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"object\":\n                return this.objectMatcher.matched(left, right);\n            case \"boolean\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"number\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"string\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"function\":\n                return this.functionMatcher.matched(left, right);\n            case \"symbol\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"bigint\":\n                return this.primitiveMatcher.matched(left, right);\n        }\n    }\n}\n\n","import { It } from \"../expected-expressions/expression-predicates\";\nimport { EqualMatcher } from \"./equal.matcher\";\n\n/**\n * @hidden\n */\nexport class EqualConstantMatcher {\n    constructor(private equalMatcher: EqualMatcher) {\n    }\n\n    public matched(left: any, right: any | It<any>): boolean {\n        if (right instanceof It) {\n            return (right as It<any>).test(left);\n        }\n        return this.equalMatcher.matched(left, right);\n    }\n}\n\n","/**\n * @hidden\n */\nexport class CommonTypeProvider {\n    public ofType(left: unknown, right: unknown) {\n        return typeof left && typeof right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class TypesMatcher {\n\n    public matched(left: unknown, right: unknown): boolean {\n        return typeof left === typeof right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class PrimitiveMatcher {\n\n    public matched<T extends (string | number | bigint | boolean | symbol)>(left: T, right: T): boolean {\n        return left === right;\n    }\n}\n\n","import { TypeofInjectionToken } from \"../typeof-injection-token\";\nimport { OBJECT_MATCHERS } from \"./object-matchers.injection-token\";\n\n/**\n * @hidden\n */\nexport class ObjectMatcher {\n\n    constructor(\n        private matchers: TypeofInjectionToken<typeof OBJECT_MATCHERS>) {\n    }\n\n    public matched<T extends Record<string, unknown>>(left: T, right: T): boolean {\n        if (left === null && right === null) return true;\n        if (left === right) return true;\n        for (const matcher of this.matchers) {\n            const matched = matcher.matched(left, right);\n            if (matched === undefined) {\n                continue;\n            }\n            return matched;\n        }\n\n        return false;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class FunctionMatcher {\n\n    public matched<T extends (...args) => unknown>(left: T, right: T): boolean {\n        return left === right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class IterableTester {\n\n    public verify(left: unknown, right: unknown) {\n        return typeof left[Symbol.iterator] === \"function\" && typeof right[Symbol.iterator] === \"function\";\n    }\n}\n","import { IterableTester } from \"./iterable.tester\";\nimport { ConstantMatcher } from \"../expression-matchers/constant.matcher\";\nimport { IObjectMatcher } from \"./object-matcher.type\";\nimport { Injector } from \"../static.injector/injector\";\n\n/**\n * Matches objects that support Iterable protocol\n */\nexport class IteratorMatcher implements IObjectMatcher {\n\n    constructor(\n        private injector: Injector,\n        private iterableTester: IterableTester) {\n    }\n\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    public matched<T extends object>(left: T, right: T): boolean {\n        if (this.iterableTester.verify(left, right) === true) {\n            const leftIterator = [...left[Symbol.iterator]()];\n            const rightIterator = [...right[Symbol.iterator]()];\n            if (leftIterator.length !== rightIterator.length) return false;\n\n            const constantMatcher = this.injector.get(ConstantMatcher);\n            for (let i = 0; i < leftIterator.length; i++) {\n                const leftValue = leftIterator[i];\n                const rightValue = rightIterator[i];\n                if (constantMatcher.matched(leftValue, rightValue) === false) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return undefined;\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\nexport const OBJECT_MATCHERS = new InjectionToken<IObjectMatcher[]>(\"OBJECT_MATCHERS\");\n","import { ObjectMapProvider } from \"./object-map.provider\";\nimport { IObjectMatcher } from \"./object-matcher.type\";\nimport { MapMatcher } from \"./map.matcher\";\n\n/**\n * Matches objects as POJO\n */\nexport class POJOMatcher implements IObjectMatcher {\n    constructor(\n        private mapMatcher: MapMatcher,\n        private objectMapProvider: ObjectMapProvider) {\n    }\n\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    public matched<T extends object>(left: T, right: T): boolean {\n        const leftProps = this.objectMapProvider.get(left);\n        const rightProps = this.objectMapProvider.get(right);\n        return this.mapMatcher.matched(leftProps, rightProps);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectMapProvider {\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    get(object: object) {\n        const props = this.getProps(object, []);\n        const keys = [...new Set<PropertyKey>(props)];\n        const map = new Map<PropertyKey, any>();\n        for (const key of keys) {\n            map.set(key, object[key]);\n        }\n\n        return map;\n    }\n\n    private getProps(object, props: PropertyKey[]): PropertyKey[] {\n        if (object === null) return props;\n        if (object === Object.prototype) return props;\n        props = [...props, ...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n        return this.getProps(Object.getPrototypeOf(object), props);\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\nimport { ConstantMatcher } from \"../expression-matchers/constant.matcher\";\nimport { Injector } from \"../static.injector/injector\";\n\n/**\n * Matches Map objects\n */\nexport class MapMatcher implements IObjectMatcher {\n    constructor(private injector: Injector) {\n    }\n\n    public matched<T = Map<unknown, unknown>>(left: T, right: T): boolean {\n        if (left instanceof Map && right instanceof Map) {\n            if (left.size !== right.size) return false;\n            const constantMatcher = this.injector.get(ConstantMatcher);\n            for (const [key, value] of left) {\n                if (right.has(key) === false) return false;\n                if (constantMatcher.matched(value, right.get(key)) === false) return false;\n            }\n            return true;\n        }\n        return undefined;\n    }\n}\n\n","import { EqualMatcher } from \"./equal.matcher\";\nimport { EqualConstantMatcher } from \"./equal-constant.matcher\";\nimport { CommonTypeProvider } from \"./common-type.provider\";\nimport { TypesMatcher } from \"./types.matcher\";\nimport { PrimitiveMatcher } from \"./primitive.matcher\";\nimport { ObjectMatcher } from \"./object.matcher\";\nimport { FunctionMatcher } from \"./function.matcher\";\nimport { IterableTester } from \"./iterable.tester\";\nimport { IteratorMatcher } from \"./iterator.matcher\";\nimport { OBJECT_MATCHERS } from \"./object-matchers.injection-token\";\nimport { POJOMatcher } from \"./pojo.matcher\";\nimport { ObjectMapProvider } from \"./object-map.provider\";\nimport { MapMatcher } from \"./map.matcher\";\nimport { ConstantMatcher } from \"../expression-matchers/constant.matcher\";\nimport { Injector } from \"../static.injector/injector\";\n\n/**\n * @hidden\n */\nexport const equalMatchersProviders = [\n    {provide: CommonTypeProvider, useClass: CommonTypeProvider, deps: []},\n    {provide: EqualConstantMatcher, useClass: EqualConstantMatcher, deps: [EqualMatcher]},\n    {provide: ConstantMatcher, useExisting: EqualConstantMatcher},\n    {\n        provide: EqualMatcher, useClass: EqualMatcher, deps: [\n            TypesMatcher,\n            CommonTypeProvider,\n            PrimitiveMatcher,\n            ObjectMatcher,\n            FunctionMatcher\n        ]\n    },\n    {provide: FunctionMatcher, useClass: FunctionMatcher, deps: []},\n    {provide: IterableTester, useClass: IterableTester, deps: []},\n    {\n        provide: IteratorMatcher, useClass: IteratorMatcher, deps: [\n            Injector,\n            IterableTester\n        ]\n    },\n    {provide: ObjectMatcher, useClass: ObjectMatcher, deps: [OBJECT_MATCHERS]},\n    {provide: POJOMatcher, useClass: POJOMatcher, deps: [MapMatcher, ObjectMapProvider]},\n    {provide: PrimitiveMatcher, useClass: PrimitiveMatcher, deps: []},\n    {provide: ObjectMapProvider, useClass: ObjectMapProvider, deps: []},\n    {provide: TypesMatcher, useClass: TypesMatcher, deps: []},\n    {provide: MapMatcher, useClass: MapMatcher, deps: [Injector]},\n];\n","import { IObjectMatcher } from \"./object-matcher.type\";\n\n/**\n * Matches Date objects\n */\nexport class DateMatcher implements IObjectMatcher {\n    public matched<T = Date>(left: T, right: T): boolean {\n        if (left instanceof Date && right instanceof Date) {\n            return left.valueOf() === right.valueOf();\n        }\n        return undefined;\n    }\n}\n\n","import { IMockOptions } from \"../moq\";\nimport { equalMatchersProviders } from \"../equal-matchers/equal-matchers.providers\";\nimport { OBJECT_MATCHERS } from \"../equal-matchers/object-matchers.injection-token\";\nimport { DateMatcher } from \"../equal-matchers/date.matcher\";\nimport { MapMatcher } from \"../equal-matchers/map.matcher\";\nimport { IteratorMatcher } from \"../equal-matchers/iterator.matcher\";\nimport { POJOMatcher } from \"../equal-matchers/pojo.matcher\";\nimport { DefaultInjectorConfig } from \"./default-injector.config\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\n\n/**\n * Provides the configuration for Angular based injector that would use equal logic for matching values.\n * By default, all values are matched with\n * [Equality comparisons and sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n * that is limited in matching objects. On the other hand developers are using so called \"deep equal comparison\" approach,\n * where objects are matched by its properties and values. This configuration changes the way how expressions are matched\n * and introduce deep equal comparison logic as well as an extension point for custom matchers.\n *\n * ```typescript\n *  import { EqualMatchingInjectorConfig, Mock } from \"moq.ts\";\n *\n *  const mock = new Mock<(args: number[]) => number>()\n *  .setup(instance => instance([2, 1]))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object([2, 1]);\n *\n *  // since the default comparisons logic sees [2, 1] and [2, 1] as different objects the provided setup would not work\n *  expect(actual).toBe(undefined);\n *  ```\n *  and compare with\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, Mock } from \"moq.ts\";\n *\n *  const mock = new Mock<(args: number[]) => number>({injectorConfig: new EqualMatchingInjectorConfig()})\n *  .setup(instance => instance([2, 1]))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object([2, 1]);\n *\n *  expect(actual).toBe(2);\n *  ```\n *  Internally the equal comparision logic implemented as a collection of object matchers that implement {@link IObjectMatcher} interface.\n *\n *  Matchers with the most specific logic should come first in the collection and if they are not able to match the objects\n *  then more general matchers would be invoked.\n *\n *  The library comes with the following matchers:\n *  0. Custom matchers\n *  1. DateMatcher - matches [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects\n *  2. MapMatcher - matches [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects\n *  3. IteratorMatcher - matches objects that supports\n *  [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n *  4. POJOMatcher - as the last resort matches objects as [POJO](https://en.wikipedia.org/wiki/Plain_old_Java_object) objects.\n *\n *  if you need a custom matcher it will come at index 1. Here is an example of a custom matcher that matches Moment and Date objects.\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, IObjectMatcher, Mock, OBJECT_MATCHERS } from \"moq.ts\";\n *  import { isMoment, utc } from \"moment\";\n *\n *  class MomentDateMatcher implements IObjectMatcher {\n *     matched<T extends object>(left: T, right: T): boolean | undefined {\n *         if (left instanceof Date && isMoment(right)) {\n *             return left.valueOf() === right.valueOf();\n *         }\n *         return undefined;\n *     }\n * }\n *\n *  const moment = utc(1);\n *  const injectorConfig = new EqualMatchingInjectorConfig([{\n *     provide: OBJECT_MATCHERS,\n *     useClass: MomentDateMatcher,\n *     multi: true,\n *     deps: []\n * }]);\n *\n *  const mock = new Mock<(args: any) => number>({injectorConfig})\n *  .setup(instance => instance(moment))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object(new Date(1));\n *\n *  expect(actual).toBe(2);\n *  ```\n *  The matching logic of EqualMatchingInjectorConfig supports {@link It}.\n *  So you can do a partial comparision.\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, It, Mock } from \"moq.ts\";\n *\n *  const func = () => undefined;\n *\n *  const injectorConfig = new EqualMatchingInjectorConfig();\n *  const mock = new Mock<(args: any) => number>({injectorConfig})\n *  .setup(instance => instance({func: It.IsAny()})) // <-- func property will be matched with It delegate\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object({func});\n *\n *  expect(actual).toBe(2);\n *  ```\n */\nexport class EqualMatchingInjectorConfig extends DefaultInjectorConfig {\n    constructor(private matchers: StaticProvider[] = []) {\n        super();\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        return [\n            ...super.get(options, providers),\n            ...equalMatchersProviders,\n            ...this.matchers,\n            {provide: OBJECT_MATCHERS, useClass: DateMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: MapMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: IteratorMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: POJOMatcher, multi: true, deps: []},\n        ];\n    }\n}\n","/*\n * Public API Surface of moq.ts\n */\n\nexport * from \"./lib/moq\";\nexport * from \"./lib/mock\";\nexport * from \"./lib/dump\";\nexport * from \"./lib/interactions\";\nexport * from \"./lib/times\";\nexport * from \"./lib/playables/play-times\";\nexport * from \"./lib/expected-expressions/expected-expressions\";\nexport * from \"./lib/expected-expressions/expression-predicates\";\nexport * from \"./lib/playables/play-times\";\nexport * from \"./lib/playables/playable-exactly\";\nexport * from \"./lib/playables/playable-once\";\nexport * from \"./lib/playables/playable-never\";\nexport * from \"./lib/playables/playable-always\";\nexport * from \"./lib/playables/playable-sequence\";\nexport * from \"./lib/injector/default-injector.config\";\nexport * from \"./lib/injector/equal-matching-injector.config\";\nexport * from \"./lib/injector/injector.factory\";\nexport * from \"./lib/injector/moq.injection-token\";\nexport * from \"./lib/mock-options/mock-options.injection-token\";\nexport * from \"./lib/equal-matchers/object-matchers.injection-token\";\nexport * from \"./lib/equal-matchers/object-matcher.type\";\nexport * from \"./lib/static.injector/metadata\";\nexport * from \"./lib/static.injector/interface/injector\";\nexport { forwardRef, isForwardRef } from \"./lib/static.injector/forward_ref\";\nexport { Injector } from \"./lib/static.injector/injector\";\nexport { INJECTOR, NullInjector } from \"./lib/static.injector/injector_compatibility\";\nexport { getClosureSafeProperty } from \"./lib/static.injector/property\";\nexport { StaticProvider } from \"./lib/static.injector/interface/provider\";\nexport * from \"./lib/static.injector/injection_token\";\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}