import { ExpectedExpressionReflector } from "./expected-expressions/expected-expression-reflector";
import { ProxyFactory } from "./interceptors/proxy.factory";
import { Times } from "./times";
import { Tracker } from "./tracker/tracker";
import { Verifier } from "./verification/verifier";
import { PrototypeStorage } from "./interceptors/prototype.storage";
import { injectorFactory } from "./injector/injector.factory";
import { MOCK } from "./injector/moq.injection-token";
import { MOCK_OPTIONS } from "./mock-options/mock-options.injection-token";
import { PRESET_BUILDER_FACTORY } from "./presets/preset-builder-factory.injection-token";
import { DefaultInjectorConfig } from "./injector/default-injector.config";
/**
 * The default implementation of {@link IMock} interface.
 */
export class Mock {
    constructor(options = {}) {
        this.options = options;
        const preOptions = Object.assign(Object.assign({}, Mock.options), options);
        const provider = { provide: MOCK, useValue: this, deps: [] };
        const injector = injectorFactory(preOptions, provider);
        this.options = injector.get(MOCK_OPTIONS);
        this.tracker = injector.get(Tracker);
        this.expressionReflector = injector.get(ExpectedExpressionReflector);
        this.interceptor = injector.get(ProxyFactory);
        this.setupFactory = injector.get(PRESET_BUILDER_FACTORY);
        this.verifier = injector.get(Verifier);
        this.prototypeStorage = injector.get(PrototypeStorage);
    }
    /**
     * The default mock options that would applied to all instantiating Mock objects.
     * By default it sets {@link IMockOptions.target} as a function, {@link IMockOptions.injectorConfig} as
     * instance of {@link DefaultInjectorConfig} and {@link IMockOptions.name} as undefined.
     * If an options are passed as constructor parameter {@link Mock.constructor} they will override the default options.
     */
    static get options() {
        if (Mock.Options === undefined) {
            Mock.Options = {
                target: () => undefined,
                injectorConfig: new DefaultInjectorConfig()
            };
        }
        return Mock.Options;
    }
    /**
     * The default mock options that would applied to all instantiating Mock objects.
     * If an options are passed as constructor parameter they will override the default options.
     */
    static set options(options) {
        Mock.Options = options;
    }
    get name() {
        return this.options.name;
    }
    setup(expression) {
        const expectedExpression = this.expressionReflector.reflect(expression);
        return this.setupFactory(expectedExpression);
    }
    verify(expression, times) {
        times = times === undefined ? Times.Once() : times;
        const expressions = this.tracker.get().map(record => record.expression);
        this.verifier.test(expression, times, expressions, this.name);
        return this;
    }
    object() {
        return this.interceptor.object();
    }
    prototypeof(prototype) {
        this.prototypeStorage.set(prototype);
        return this;
    }
    /**
     * @experimental
     */
    insequence(sequence, expression) {
        sequence.add(this, expression);
        return this;
    }
}
Mock.Options = undefined;
//# sourceMappingURL=data:application/json;base64,