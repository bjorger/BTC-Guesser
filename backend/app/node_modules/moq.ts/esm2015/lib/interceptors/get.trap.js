import { GetPropertyInteraction } from "../interactions";
import { MoqAPI } from "../moq";
/**
 * @hidden
 */
export class GetTrap {
    constructor(mock, tracker, propertiesValueStorage, interactionPlayer, hasPropertyExplorer, hasMethodExplorer, spyFunctionProvider) {
        this.mock = mock;
        this.tracker = tracker;
        this.propertiesValueStorage = propertiesValueStorage;
        this.interactionPlayer = interactionPlayer;
        this.hasPropertyExplorer = hasPropertyExplorer;
        this.hasMethodExplorer = hasMethodExplorer;
        this.spyFunctionProvider = spyFunctionProvider;
    }
    intercept(property) {
        const interaction = new GetPropertyInteraction(property);
        this.tracker.add(interaction);
        if (property === MoqAPI) {
            return this.mock;
        }
        if (this.propertiesValueStorage.has(property)) {
            return this.propertiesValueStorage.get(property);
        }
        if (this.hasPropertyExplorer.has(property)) {
            return this.interactionPlayer.play(interaction);
        }
        if (this.hasMethodExplorer.has(property)) {
            return this.spyFunctionProvider.get(property);
        }
        return this.interactionPlayer.play(interaction);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LnRyYXAuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvZ2V0LnRyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUtoQzs7R0FFRztBQUNILE1BQU0sT0FBTyxPQUFPO0lBQ2hCLFlBQ1ksSUFBdUMsRUFDdkMsT0FBZ0IsRUFDaEIsc0JBQThDLEVBQzlDLGlCQUFvQyxFQUNwQyxtQkFBd0MsRUFDeEMsaUJBQW9DLEVBQ3BDLG1CQUF3QztRQU54QyxTQUFJLEdBQUosSUFBSSxDQUFtQztRQUN2QyxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUVwRCxDQUFDO0lBRU0sU0FBUyxDQUFDLFFBQXFCO1FBQ2xDLE1BQU0sV0FBVyxHQUFHLElBQUksc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFOUIsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUNwQjtRQUVELElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRDtRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRQcm9wZXJ0eUludGVyYWN0aW9uIH0gZnJvbSBcIi4uL2ludGVyYWN0aW9uc1wiO1xuaW1wb3J0IHsgUHJvcGVydGllc1ZhbHVlU3RvcmFnZSB9IGZyb20gXCIuL3Byb3BlcnRpZXMtdmFsdWUuc3RvcmFnZVwiO1xuaW1wb3J0IHsgU3B5RnVuY3Rpb25Qcm92aWRlciB9IGZyb20gXCIuL3NweS1mdW5jdGlvbi5wcm92aWRlclwiO1xuaW1wb3J0IHsgSW50ZXJhY3Rpb25QbGF5ZXIgfSBmcm9tIFwiLi4vaW50ZXJhY3Rpb24tcGxheWVycy9pbnRlcmFjdGlvbi5wbGF5ZXJcIjtcbmltcG9ydCB7IEhhc1Byb3BlcnR5RXhwbG9yZXIgfSBmcm9tIFwiLi4vZXhwbG9yZXJzL2hhcy1wcm9wZXJ0eS5leHBsb3Jlci9oYXMtcHJvcGVydHkuZXhwbG9yZXJcIjtcbmltcG9ydCB7IEhhc01ldGhvZEV4cGxvcmVyIH0gZnJvbSBcIi4uL2V4cGxvcmVycy9oYXMtbWV0aG9kLmV4cGxvcmVyL2hhcy1tZXRob2QuZXhwbG9yZXJcIjtcbmltcG9ydCB7IE1vcUFQSSB9IGZyb20gXCIuLi9tb3FcIjtcbmltcG9ydCB7IFRyYWNrZXIgfSBmcm9tIFwiLi4vdHJhY2tlci90cmFja2VyXCI7XG5pbXBvcnQgeyBUeXBlb2ZJbmplY3Rpb25Ub2tlbiB9IGZyb20gXCIuLi90eXBlb2YtaW5qZWN0aW9uLXRva2VuXCI7XG5pbXBvcnQgeyBNT0NLIH0gZnJvbSBcIi4uL2luamVjdG9yL21vcS5pbmplY3Rpb24tdG9rZW5cIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBHZXRUcmFwIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBtb2NrOiBUeXBlb2ZJbmplY3Rpb25Ub2tlbjx0eXBlb2YgTU9DSz4sXG4gICAgICAgIHByaXZhdGUgdHJhY2tlcjogVHJhY2tlcixcbiAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0aWVzVmFsdWVTdG9yYWdlOiBQcm9wZXJ0aWVzVmFsdWVTdG9yYWdlLFxuICAgICAgICBwcml2YXRlIGludGVyYWN0aW9uUGxheWVyOiBJbnRlcmFjdGlvblBsYXllcixcbiAgICAgICAgcHJpdmF0ZSBoYXNQcm9wZXJ0eUV4cGxvcmVyOiBIYXNQcm9wZXJ0eUV4cGxvcmVyLFxuICAgICAgICBwcml2YXRlIGhhc01ldGhvZEV4cGxvcmVyOiBIYXNNZXRob2RFeHBsb3JlcixcbiAgICAgICAgcHJpdmF0ZSBzcHlGdW5jdGlvblByb3ZpZGVyOiBTcHlGdW5jdGlvblByb3ZpZGVyKSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgaW50ZXJjZXB0KHByb3BlcnR5OiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEdldFByb3BlcnR5SW50ZXJhY3Rpb24ocHJvcGVydHkpO1xuXG4gICAgICAgIHRoaXMudHJhY2tlci5hZGQoaW50ZXJhY3Rpb24pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gTW9xQVBJKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2NrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllc1ZhbHVlU3RvcmFnZS5oYXMocHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzVmFsdWVTdG9yYWdlLmdldChwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oYXNQcm9wZXJ0eUV4cGxvcmVyLmhhcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVyYWN0aW9uUGxheWVyLnBsYXkoaW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzTWV0aG9kRXhwbG9yZXIuaGFzKHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3B5RnVuY3Rpb25Qcm92aWRlci5nZXQocHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJhY3Rpb25QbGF5ZXIucGxheShpbnRlcmFjdGlvbik7XG4gICAgfVxufVxuIl19