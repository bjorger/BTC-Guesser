import { TrackedExpressionsFormatter } from "./formatters/tracked-expressions-formatter";
import { injectorFactory } from "./injector/injector.factory";
import { MOCK } from "./injector/moq.injection-token";
/**
 * This function dumps into console.log all interactions with the mocked object
 */
export function dump(mock, writer = console) {
    const injector = injectorFactory(mock.options, { provide: MOCK, useValue: mock, deps: [] });
    const formatter = injector.get(TrackedExpressionsFormatter);
    const expressions = mock.tracker.get().map(record => record.expression);
    const output = formatter.format(expressions);
    const delimiter = "-------------------------------";
    writer.log(`Dump of ${mock.name === undefined ? "noname mock" : mock.name}`);
    writer.log(delimiter);
    writer.log(`\n${output}`);
    writer.log(delimiter);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtcC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjLyIsInNvdXJjZXMiOlsibGliL2R1bXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDekYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sVUFBVSxJQUFJLENBQUksSUFBYyxFQUFFLFNBQWtCLE9BQU87SUFDN0QsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUM7SUFDMUYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0MsTUFBTSxTQUFTLEdBQUcsaUNBQWlDLENBQUM7SUFDcEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhY2tlZEV4cHJlc3Npb25zRm9ybWF0dGVyIH0gZnJvbSBcIi4vZm9ybWF0dGVycy90cmFja2VkLWV4cHJlc3Npb25zLWZvcm1hdHRlclwiO1xyXG5pbXBvcnQgeyBpbmplY3RvckZhY3RvcnkgfSBmcm9tIFwiLi9pbmplY3Rvci9pbmplY3Rvci5mYWN0b3J5XCI7XHJcbmltcG9ydCB7IElNb2NrIH0gZnJvbSBcIi4vbW9xXCI7XHJcbmltcG9ydCB7IE1PQ0sgfSBmcm9tIFwiLi9pbmplY3Rvci9tb3EuaW5qZWN0aW9uLXRva2VuXCI7XHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBkdW1wcyBpbnRvIGNvbnNvbGUubG9nIGFsbCBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgbW9ja2VkIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGR1bXA8VD4obW9jazogSU1vY2s8VD4sIHdyaXRlcjogQ29uc29sZSA9IGNvbnNvbGUpOiB2b2lkIHtcclxuICAgIGNvbnN0IGluamVjdG9yID0gaW5qZWN0b3JGYWN0b3J5KG1vY2sub3B0aW9ucywge3Byb3ZpZGU6IE1PQ0ssIHVzZVZhbHVlOiBtb2NrLCBkZXBzOiBbXX0pO1xyXG4gICAgY29uc3QgZm9ybWF0dGVyID0gaW5qZWN0b3IuZ2V0KFRyYWNrZWRFeHByZXNzaW9uc0Zvcm1hdHRlcik7XHJcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IG1vY2sudHJhY2tlci5nZXQoKS5tYXAocmVjb3JkID0+IHJlY29yZC5leHByZXNzaW9uKTtcclxuICAgIGNvbnN0IG91dHB1dCA9IGZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbnMpO1xyXG4gICAgY29uc3QgZGVsaW1pdGVyID0gXCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCI7XHJcbiAgICB3cml0ZXIubG9nKGBEdW1wIG9mICR7bW9jay5uYW1lID09PSB1bmRlZmluZWQgPyBcIm5vbmFtZSBtb2NrXCIgOiBtb2NrLm5hbWV9YCk7XHJcbiAgICB3cml0ZXIubG9nKGRlbGltaXRlcik7XHJcbiAgICB3cml0ZXIubG9nKGBcXG4ke291dHB1dH1gKTtcclxuICAgIHdyaXRlci5sb2coZGVsaW1pdGVyKTtcclxufVxyXG4iXX0=