import { trackerProviders } from "../tracker/tracker.providers";
import { reflectorProviders } from "../expected-expressions/reflector.providers";
import { presetsProviders } from "../presets/presets.providers";
import { verificationProviders } from "../verification/verification.providers";
import { interceptorsProviders } from "../interceptors/interceptors.providers";
import { playablesProviders } from "../playables/playables.providers";
import { interactionPlayersProviders } from "../interaction-players/interaction-players.providers";
import { formattersProviders } from "../formatters/formatters.providers";
import { expressionMatchersProviders } from "../expression-matchers/expression-matchers.providers";
import { typeExplorersProviders } from "../explorers/type-explorers.providers";
import { mockOptionsProviders } from "../mock-options/mock-options.providers";
/**
 * Provides the default configuration for an angular based injector that would be used internally by {@link Mock} instance.
 */
export class DefaultInjectorConfig {
    get(options, providers) {
        return [
            ...providers,
            ...mockOptionsProviders(options),
            ...trackerProviders,
            ...reflectorProviders,
            ...presetsProviders,
            ...verificationProviders,
            ...interceptorsProviders,
            ...playablesProviders,
            ...interactionPlayersProviders,
            ...formattersProviders,
            ...expressionMatchersProviders,
            ...typeExplorersProviders
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1pbmplY3Rvci5jb25maWcuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9pbmplY3Rvci9kZWZhdWx0LWluamVjdG9yLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNqRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUc5RTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFDOUIsR0FBRyxDQUFDLE9BQThCLEVBQUUsU0FBMkI7UUFDM0QsT0FBTztZQUNILEdBQUcsU0FBUztZQUNaLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDO1lBQ2hDLEdBQUcsZ0JBQWdCO1lBQ25CLEdBQUcsa0JBQWtCO1lBQ3JCLEdBQUcsZ0JBQWdCO1lBQ25CLEdBQUcscUJBQXFCO1lBQ3hCLEdBQUcscUJBQXFCO1lBQ3hCLEdBQUcsa0JBQWtCO1lBQ3JCLEdBQUcsMkJBQTJCO1lBQzlCLEdBQUcsbUJBQW1CO1lBQ3RCLEdBQUcsMkJBQTJCO1lBQzlCLEdBQUcsc0JBQXNCO1NBQzVCLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSW5qZWN0b3JDb25maWcsIElNb2NrT3B0aW9ucyB9IGZyb20gXCIuLi9tb3FcIjtcbmltcG9ydCB7IHRyYWNrZXJQcm92aWRlcnMgfSBmcm9tIFwiLi4vdHJhY2tlci90cmFja2VyLnByb3ZpZGVyc1wiO1xuaW1wb3J0IHsgcmVmbGVjdG9yUHJvdmlkZXJzIH0gZnJvbSBcIi4uL2V4cGVjdGVkLWV4cHJlc3Npb25zL3JlZmxlY3Rvci5wcm92aWRlcnNcIjtcbmltcG9ydCB7IHByZXNldHNQcm92aWRlcnMgfSBmcm9tIFwiLi4vcHJlc2V0cy9wcmVzZXRzLnByb3ZpZGVyc1wiO1xuaW1wb3J0IHsgdmVyaWZpY2F0aW9uUHJvdmlkZXJzIH0gZnJvbSBcIi4uL3ZlcmlmaWNhdGlvbi92ZXJpZmljYXRpb24ucHJvdmlkZXJzXCI7XG5pbXBvcnQgeyBpbnRlcmNlcHRvcnNQcm92aWRlcnMgfSBmcm9tIFwiLi4vaW50ZXJjZXB0b3JzL2ludGVyY2VwdG9ycy5wcm92aWRlcnNcIjtcbmltcG9ydCB7IHBsYXlhYmxlc1Byb3ZpZGVycyB9IGZyb20gXCIuLi9wbGF5YWJsZXMvcGxheWFibGVzLnByb3ZpZGVyc1wiO1xuaW1wb3J0IHsgaW50ZXJhY3Rpb25QbGF5ZXJzUHJvdmlkZXJzIH0gZnJvbSBcIi4uL2ludGVyYWN0aW9uLXBsYXllcnMvaW50ZXJhY3Rpb24tcGxheWVycy5wcm92aWRlcnNcIjtcbmltcG9ydCB7IGZvcm1hdHRlcnNQcm92aWRlcnMgfSBmcm9tIFwiLi4vZm9ybWF0dGVycy9mb3JtYXR0ZXJzLnByb3ZpZGVyc1wiO1xuaW1wb3J0IHsgZXhwcmVzc2lvbk1hdGNoZXJzUHJvdmlkZXJzIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24tbWF0Y2hlcnMvZXhwcmVzc2lvbi1tYXRjaGVycy5wcm92aWRlcnNcIjtcbmltcG9ydCB7IHR5cGVFeHBsb3JlcnNQcm92aWRlcnMgfSBmcm9tIFwiLi4vZXhwbG9yZXJzL3R5cGUtZXhwbG9yZXJzLnByb3ZpZGVyc1wiO1xuaW1wb3J0IHsgbW9ja09wdGlvbnNQcm92aWRlcnMgfSBmcm9tIFwiLi4vbW9jay1vcHRpb25zL21vY2stb3B0aW9ucy5wcm92aWRlcnNcIjtcbmltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSBcIi4uL3N0YXRpYy5pbmplY3Rvci9pbnRlcmZhY2UvcHJvdmlkZXJcIjtcblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciBhbiBhbmd1bGFyIGJhc2VkIGluamVjdG9yIHRoYXQgd291bGQgYmUgdXNlZCBpbnRlcm5hbGx5IGJ5IHtAbGluayBNb2NrfSBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRJbmplY3RvckNvbmZpZyBpbXBsZW1lbnRzIElJbmplY3RvckNvbmZpZyB7XG4gICAgZ2V0KG9wdGlvbnM6IElNb2NrT3B0aW9uczx1bmtub3duPiwgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdKTogU3RhdGljUHJvdmlkZXJbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi5wcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5tb2NrT3B0aW9uc1Byb3ZpZGVycyhvcHRpb25zKSxcbiAgICAgICAgICAgIC4uLnRyYWNrZXJQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5yZWZsZWN0b3JQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5wcmVzZXRzUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4udmVyaWZpY2F0aW9uUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4uaW50ZXJjZXB0b3JzUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4ucGxheWFibGVzUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4uaW50ZXJhY3Rpb25QbGF5ZXJzUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4uZm9ybWF0dGVyc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmV4cHJlc3Npb25NYXRjaGVyc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnR5cGVFeHBsb3JlcnNQcm92aWRlcnNcbiAgICAgICAgXTtcbiAgICB9XG59XG4iXX0=