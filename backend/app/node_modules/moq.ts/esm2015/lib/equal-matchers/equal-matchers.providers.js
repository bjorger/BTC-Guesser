import { EqualMatcher } from "./equal.matcher";
import { EqualConstantMatcher } from "./equal-constant.matcher";
import { CommonTypeProvider } from "./common-type.provider";
import { TypesMatcher } from "./types.matcher";
import { PrimitiveMatcher } from "./primitive.matcher";
import { ObjectMatcher } from "./object.matcher";
import { FunctionMatcher } from "./function.matcher";
import { IterableTester } from "./iterable.tester";
import { IteratorMatcher } from "./iterator.matcher";
import { OBJECT_MATCHERS } from "./object-matchers.injection-token";
import { POJOMatcher } from "./pojo.matcher";
import { ObjectMapProvider } from "./object-map.provider";
import { MapMatcher } from "./map.matcher";
import { ConstantMatcher } from "../expression-matchers/constant.matcher";
import { Injector } from "../static.injector/injector";
/**
 * @hidden
 */
export const equalMatchersProviders = [
    { provide: CommonTypeProvider, useClass: CommonTypeProvider, deps: [] },
    { provide: EqualConstantMatcher, useClass: EqualConstantMatcher, deps: [EqualMatcher] },
    { provide: ConstantMatcher, useExisting: EqualConstantMatcher },
    {
        provide: EqualMatcher, useClass: EqualMatcher, deps: [
            TypesMatcher,
            CommonTypeProvider,
            PrimitiveMatcher,
            ObjectMatcher,
            FunctionMatcher
        ]
    },
    { provide: FunctionMatcher, useClass: FunctionMatcher, deps: [] },
    { provide: IterableTester, useClass: IterableTester, deps: [] },
    {
        provide: IteratorMatcher, useClass: IteratorMatcher, deps: [
            Injector,
            IterableTester
        ]
    },
    { provide: ObjectMatcher, useClass: ObjectMatcher, deps: [OBJECT_MATCHERS] },
    { provide: POJOMatcher, useClass: POJOMatcher, deps: [MapMatcher, ObjectMapProvider] },
    { provide: PrimitiveMatcher, useClass: PrimitiveMatcher, deps: [] },
    { provide: ObjectMapProvider, useClass: ObjectMapProvider, deps: [] },
    { provide: TypesMatcher, useClass: TypesMatcher, deps: [] },
    { provide: MapMatcher, useClass: MapMatcher, deps: [Injector] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXF1YWwtbWF0Y2hlcnMucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL21vcS9zcmMvIiwic291cmNlcyI6WyJsaWIvZXF1YWwtbWF0Y2hlcnMvZXF1YWwtbWF0Y2hlcnMucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXZEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUc7SUFDbEMsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDckUsRUFBQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFDO0lBQ3JGLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUM7SUFDN0Q7UUFDSSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFO1lBQ2pELFlBQVk7WUFDWixrQkFBa0I7WUFDbEIsZ0JBQWdCO1lBQ2hCLGFBQWE7WUFDYixlQUFlO1NBQ2xCO0tBQ0o7SUFDRCxFQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQy9ELEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDN0Q7UUFDSSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFO1lBQ3ZELFFBQVE7WUFDUixjQUFjO1NBQ2pCO0tBQ0o7SUFDRCxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBQztJQUMxRSxFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsRUFBQztJQUNwRixFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNqRSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNuRSxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ3pELEVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFDO0NBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFcXVhbE1hdGNoZXIgfSBmcm9tIFwiLi9lcXVhbC5tYXRjaGVyXCI7XG5pbXBvcnQgeyBFcXVhbENvbnN0YW50TWF0Y2hlciB9IGZyb20gXCIuL2VxdWFsLWNvbnN0YW50Lm1hdGNoZXJcIjtcbmltcG9ydCB7IENvbW1vblR5cGVQcm92aWRlciB9IGZyb20gXCIuL2NvbW1vbi10eXBlLnByb3ZpZGVyXCI7XG5pbXBvcnQgeyBUeXBlc01hdGNoZXIgfSBmcm9tIFwiLi90eXBlcy5tYXRjaGVyXCI7XG5pbXBvcnQgeyBQcmltaXRpdmVNYXRjaGVyIH0gZnJvbSBcIi4vcHJpbWl0aXZlLm1hdGNoZXJcIjtcbmltcG9ydCB7IE9iamVjdE1hdGNoZXIgfSBmcm9tIFwiLi9vYmplY3QubWF0Y2hlclwiO1xuaW1wb3J0IHsgRnVuY3Rpb25NYXRjaGVyIH0gZnJvbSBcIi4vZnVuY3Rpb24ubWF0Y2hlclwiO1xuaW1wb3J0IHsgSXRlcmFibGVUZXN0ZXIgfSBmcm9tIFwiLi9pdGVyYWJsZS50ZXN0ZXJcIjtcbmltcG9ydCB7IEl0ZXJhdG9yTWF0Y2hlciB9IGZyb20gXCIuL2l0ZXJhdG9yLm1hdGNoZXJcIjtcbmltcG9ydCB7IE9CSkVDVF9NQVRDSEVSUyB9IGZyb20gXCIuL29iamVjdC1tYXRjaGVycy5pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IFBPSk9NYXRjaGVyIH0gZnJvbSBcIi4vcG9qby5tYXRjaGVyXCI7XG5pbXBvcnQgeyBPYmplY3RNYXBQcm92aWRlciB9IGZyb20gXCIuL29iamVjdC1tYXAucHJvdmlkZXJcIjtcbmltcG9ydCB7IE1hcE1hdGNoZXIgfSBmcm9tIFwiLi9tYXAubWF0Y2hlclwiO1xuaW1wb3J0IHsgQ29uc3RhbnRNYXRjaGVyIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24tbWF0Y2hlcnMvY29uc3RhbnQubWF0Y2hlclwiO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiLi4vc3RhdGljLmluamVjdG9yL2luamVjdG9yXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgZXF1YWxNYXRjaGVyc1Byb3ZpZGVycyA9IFtcbiAgICB7cHJvdmlkZTogQ29tbW9uVHlwZVByb3ZpZGVyLCB1c2VDbGFzczogQ29tbW9uVHlwZVByb3ZpZGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IEVxdWFsQ29uc3RhbnRNYXRjaGVyLCB1c2VDbGFzczogRXF1YWxDb25zdGFudE1hdGNoZXIsIGRlcHM6IFtFcXVhbE1hdGNoZXJdfSxcbiAgICB7cHJvdmlkZTogQ29uc3RhbnRNYXRjaGVyLCB1c2VFeGlzdGluZzogRXF1YWxDb25zdGFudE1hdGNoZXJ9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogRXF1YWxNYXRjaGVyLCB1c2VDbGFzczogRXF1YWxNYXRjaGVyLCBkZXBzOiBbXG4gICAgICAgICAgICBUeXBlc01hdGNoZXIsXG4gICAgICAgICAgICBDb21tb25UeXBlUHJvdmlkZXIsXG4gICAgICAgICAgICBQcmltaXRpdmVNYXRjaGVyLFxuICAgICAgICAgICAgT2JqZWN0TWF0Y2hlcixcbiAgICAgICAgICAgIEZ1bmN0aW9uTWF0Y2hlclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogRnVuY3Rpb25NYXRjaGVyLCB1c2VDbGFzczogRnVuY3Rpb25NYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IEl0ZXJhYmxlVGVzdGVyLCB1c2VDbGFzczogSXRlcmFibGVUZXN0ZXIsIGRlcHM6IFtdfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IEl0ZXJhdG9yTWF0Y2hlciwgdXNlQ2xhc3M6IEl0ZXJhdG9yTWF0Y2hlciwgZGVwczogW1xuICAgICAgICAgICAgSW5qZWN0b3IsXG4gICAgICAgICAgICBJdGVyYWJsZVRlc3RlclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogT2JqZWN0TWF0Y2hlciwgdXNlQ2xhc3M6IE9iamVjdE1hdGNoZXIsIGRlcHM6IFtPQkpFQ1RfTUFUQ0hFUlNdfSxcbiAgICB7cHJvdmlkZTogUE9KT01hdGNoZXIsIHVzZUNsYXNzOiBQT0pPTWF0Y2hlciwgZGVwczogW01hcE1hdGNoZXIsIE9iamVjdE1hcFByb3ZpZGVyXX0sXG4gICAge3Byb3ZpZGU6IFByaW1pdGl2ZU1hdGNoZXIsIHVzZUNsYXNzOiBQcmltaXRpdmVNYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IE9iamVjdE1hcFByb3ZpZGVyLCB1c2VDbGFzczogT2JqZWN0TWFwUHJvdmlkZXIsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogVHlwZXNNYXRjaGVyLCB1c2VDbGFzczogVHlwZXNNYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IE1hcE1hdGNoZXIsIHVzZUNsYXNzOiBNYXBNYXRjaGVyLCBkZXBzOiBbSW5qZWN0b3JdfSxcbl07XG4iXX0=