import { ConstantMatcher } from "../expression-matchers/constant.matcher";
/**
 * Matches Map objects
 */
export class MapMatcher {
    constructor(injector) {
        this.injector = injector;
    }
    matched(left, right) {
        if (left instanceof Map && right instanceof Map) {
            if (left.size !== right.size)
                return false;
            const constantMatcher = this.injector.get(ConstantMatcher);
            for (const [key, value] of left) {
                if (right.has(key) === false)
                    return false;
                if (constantMatcher.matched(value, right.get(key)) === false)
                    return false;
            }
            return true;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLm1hdGNoZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9lcXVhbC1tYXRjaGVycy9tYXAubWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFHMUU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sVUFBVTtJQUNuQixZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ3RDLENBQUM7SUFFTSxPQUFPLENBQTRCLElBQU8sRUFBRSxLQUFRO1FBQ3ZELElBQUksSUFBSSxZQUFZLEdBQUcsSUFBSSxLQUFLLFlBQVksR0FBRyxFQUFFO1lBQzdDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSTtnQkFBRSxPQUFPLEtBQUssQ0FBQztZQUMzQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzRCxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUM3QixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSztvQkFBRSxPQUFPLEtBQUssQ0FBQztnQkFDM0MsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSztvQkFBRSxPQUFPLEtBQUssQ0FBQzthQUM5RTtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT2JqZWN0TWF0Y2hlciB9IGZyb20gXCIuL29iamVjdC1tYXRjaGVyLnR5cGVcIjtcbmltcG9ydCB7IENvbnN0YW50TWF0Y2hlciB9IGZyb20gXCIuLi9leHByZXNzaW9uLW1hdGNoZXJzL2NvbnN0YW50Lm1hdGNoZXJcIjtcbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSBcIi4uL3N0YXRpYy5pbmplY3Rvci9pbmplY3RvclwiO1xuXG4vKipcbiAqIE1hdGNoZXMgTWFwIG9iamVjdHNcbiAqL1xuZXhwb3J0IGNsYXNzIE1hcE1hdGNoZXIgaW1wbGVtZW50cyBJT2JqZWN0TWF0Y2hlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWF0Y2hlZDxUID0gTWFwPHVua25vd24sIHVua25vd24+PihsZWZ0OiBULCByaWdodDogVCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIE1hcCAmJiByaWdodCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgaWYgKGxlZnQuc2l6ZSAhPT0gcmlnaHQuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgY29uc3RhbnRNYXRjaGVyID0gdGhpcy5pbmplY3Rvci5nZXQoQ29uc3RhbnRNYXRjaGVyKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGxlZnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmlnaHQuaGFzKGtleSkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0YW50TWF0Y2hlci5tYXRjaGVkKHZhbHVlLCByaWdodC5nZXQoa2V5KSkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuIl19