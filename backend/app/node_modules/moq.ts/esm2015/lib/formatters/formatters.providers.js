import { VerifyFormatter } from "./verify-formatter";
import { ExpectedExpressionFormatter } from "./expected-expression-formatter";
import { TrackedExpressionsFormatter } from "./tracked-expressions-formatter";
import { ExpressionFormatter } from "./expression-formatter";
import { SetPropertyExpressionFormatter } from "./set.property-formatter";
import { ConstantFormatter } from "./constant-formatter";
import { PropertyKeyFormatter } from "./property-key.formatter";
import { NamedMethodExpressionFormatter } from "./named.method-formatter";
import { MethodExpressionFormatter } from "./method-formatter";
import { InOperatorFormatter } from "./in-operator.formatter";
import { GetPropertyExpressionFormatter } from "./get.property-formatter";
/**
 * @hidden
 */
export const formattersProviders = [
    {
        provide: VerifyFormatter,
        useClass: VerifyFormatter,
        deps: [ExpectedExpressionFormatter, TrackedExpressionsFormatter]
    },
    { provide: TrackedExpressionsFormatter, useClass: TrackedExpressionsFormatter, deps: [ExpressionFormatter] },
    {
        provide: SetPropertyExpressionFormatter,
        useClass: SetPropertyExpressionFormatter,
        deps: [ConstantFormatter, PropertyKeyFormatter]
    },
    { provide: PropertyKeyFormatter, useClass: PropertyKeyFormatter, deps: [] },
    {
        provide: NamedMethodExpressionFormatter,
        useClass: NamedMethodExpressionFormatter,
        deps: [ConstantFormatter, PropertyKeyFormatter]
    },
    { provide: MethodExpressionFormatter, useClass: MethodExpressionFormatter, deps: [ConstantFormatter] },
    { provide: InOperatorFormatter, useClass: InOperatorFormatter, deps: [PropertyKeyFormatter] },
    { provide: GetPropertyExpressionFormatter, useClass: GetPropertyExpressionFormatter, deps: [PropertyKeyFormatter] },
    {
        provide: ExpressionFormatter,
        useClass: ExpressionFormatter,
        deps: [
            GetPropertyExpressionFormatter,
            SetPropertyExpressionFormatter,
            MethodExpressionFormatter,
            NamedMethodExpressionFormatter,
            ConstantFormatter,
            InOperatorFormatter
        ]
    },
    { provide: ExpectedExpressionFormatter, useClass: ExpectedExpressionFormatter, deps: [ExpressionFormatter] },
    { provide: ConstantFormatter, useClass: ConstantFormatter, deps: [] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVycy5wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtYXR0ZXJzL2Zvcm1hdHRlcnMucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUxRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQy9CO1FBQ0ksT0FBTyxFQUFFLGVBQWU7UUFDeEIsUUFBUSxFQUFFLGVBQWU7UUFDekIsSUFBSSxFQUFFLENBQUMsMkJBQTJCLEVBQUUsMkJBQTJCLENBQUM7S0FDbkU7SUFDRCxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsSUFBSSxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBQztJQUMxRztRQUNJLE9BQU8sRUFBRSw4QkFBOEI7UUFDdkMsUUFBUSxFQUFFLDhCQUE4QjtRQUN4QyxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxvQkFBb0IsQ0FBQztLQUNsRDtJQUNELEVBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ3pFO1FBQ0ksT0FBTyxFQUFFLDhCQUE4QjtRQUN2QyxRQUFRLEVBQUUsOEJBQThCO1FBQ3hDLElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFLG9CQUFvQixDQUFDO0tBQ2xEO0lBQ0QsRUFBQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsUUFBUSxFQUFFLHlCQUF5QixFQUFFLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUM7SUFDcEcsRUFBQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUM7SUFDM0YsRUFBQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsUUFBUSxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUM7SUFDakg7UUFDSSxPQUFPLEVBQUUsbUJBQW1CO1FBQzVCLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsSUFBSSxFQUFFO1lBQ0YsOEJBQThCO1lBQzlCLDhCQUE4QjtZQUM5Qix5QkFBeUI7WUFDekIsOEJBQThCO1lBQzlCLGlCQUFpQjtZQUNqQixtQkFBbUI7U0FDdEI7S0FDSjtJQUNELEVBQUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFDO0lBQzFHLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0NBQ3RFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZXJpZnlGb3JtYXR0ZXIgfSBmcm9tIFwiLi92ZXJpZnktZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBFeHBlY3RlZEV4cHJlc3Npb25Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9leHBlY3RlZC1leHByZXNzaW9uLWZvcm1hdHRlclwiO1xuaW1wb3J0IHsgVHJhY2tlZEV4cHJlc3Npb25zRm9ybWF0dGVyIH0gZnJvbSBcIi4vdHJhY2tlZC1leHByZXNzaW9ucy1mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEV4cHJlc3Npb25Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9leHByZXNzaW9uLWZvcm1hdHRlclwiO1xuaW1wb3J0IHsgU2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyIH0gZnJvbSBcIi4vc2V0LnByb3BlcnR5LWZvcm1hdHRlclwiO1xuaW1wb3J0IHsgQ29uc3RhbnRGb3JtYXR0ZXIgfSBmcm9tIFwiLi9jb25zdGFudC1mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IFByb3BlcnR5S2V5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vcHJvcGVydHkta2V5LmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTmFtZWRNZXRob2RFeHByZXNzaW9uRm9ybWF0dGVyIH0gZnJvbSBcIi4vbmFtZWQubWV0aG9kLWZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlciB9IGZyb20gXCIuL21ldGhvZC1mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEluT3BlcmF0b3JGb3JtYXR0ZXIgfSBmcm9tIFwiLi9pbi1vcGVyYXRvci5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEdldFByb3BlcnR5RXhwcmVzc2lvbkZvcm1hdHRlciB9IGZyb20gXCIuL2dldC5wcm9wZXJ0eS1mb3JtYXR0ZXJcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzUHJvdmlkZXJzID0gW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVmVyaWZ5Rm9ybWF0dGVyLFxuICAgICAgICB1c2VDbGFzczogVmVyaWZ5Rm9ybWF0dGVyLFxuICAgICAgICBkZXBzOiBbRXhwZWN0ZWRFeHByZXNzaW9uRm9ybWF0dGVyLCBUcmFja2VkRXhwcmVzc2lvbnNGb3JtYXR0ZXJdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogVHJhY2tlZEV4cHJlc3Npb25zRm9ybWF0dGVyLCB1c2VDbGFzczogVHJhY2tlZEV4cHJlc3Npb25zRm9ybWF0dGVyLCBkZXBzOiBbRXhwcmVzc2lvbkZvcm1hdHRlcl19LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogU2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICB1c2VDbGFzczogU2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICBkZXBzOiBbQ29uc3RhbnRGb3JtYXR0ZXIsIFByb3BlcnR5S2V5Rm9ybWF0dGVyXVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IFByb3BlcnR5S2V5Rm9ybWF0dGVyLCB1c2VDbGFzczogUHJvcGVydHlLZXlGb3JtYXR0ZXIsIGRlcHM6IFtdfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IE5hbWVkTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlcixcbiAgICAgICAgdXNlQ2xhc3M6IE5hbWVkTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlcixcbiAgICAgICAgZGVwczogW0NvbnN0YW50Rm9ybWF0dGVyLCBQcm9wZXJ0eUtleUZvcm1hdHRlcl1cbiAgICB9LFxuICAgIHtwcm92aWRlOiBNZXRob2RFeHByZXNzaW9uRm9ybWF0dGVyLCB1c2VDbGFzczogTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlciwgZGVwczogW0NvbnN0YW50Rm9ybWF0dGVyXX0sXG4gICAge3Byb3ZpZGU6IEluT3BlcmF0b3JGb3JtYXR0ZXIsIHVzZUNsYXNzOiBJbk9wZXJhdG9yRm9ybWF0dGVyLCBkZXBzOiBbUHJvcGVydHlLZXlGb3JtYXR0ZXJdfSxcbiAgICB7cHJvdmlkZTogR2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyLCB1c2VDbGFzczogR2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyLCBkZXBzOiBbUHJvcGVydHlLZXlGb3JtYXR0ZXJdfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IEV4cHJlc3Npb25Gb3JtYXR0ZXIsXG4gICAgICAgIHVzZUNsYXNzOiBFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBHZXRQcm9wZXJ0eUV4cHJlc3Npb25Gb3JtYXR0ZXIsXG4gICAgICAgICAgICBTZXRQcm9wZXJ0eUV4cHJlc3Npb25Gb3JtYXR0ZXIsXG4gICAgICAgICAgICBNZXRob2RFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICAgICAgTmFtZWRNZXRob2RFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICAgICAgQ29uc3RhbnRGb3JtYXR0ZXIsXG4gICAgICAgICAgICBJbk9wZXJhdG9yRm9ybWF0dGVyXG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtwcm92aWRlOiBFeHBlY3RlZEV4cHJlc3Npb25Gb3JtYXR0ZXIsIHVzZUNsYXNzOiBFeHBlY3RlZEV4cHJlc3Npb25Gb3JtYXR0ZXIsIGRlcHM6IFtFeHByZXNzaW9uRm9ybWF0dGVyXX0sXG4gICAge3Byb3ZpZGU6IENvbnN0YW50Rm9ybWF0dGVyLCB1c2VDbGFzczogQ29uc3RhbnRGb3JtYXR0ZXIsIGRlcHM6IFtdfSxcbl07XG4iXX0=