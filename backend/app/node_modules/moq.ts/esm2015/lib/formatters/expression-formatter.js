import { GetPropertyInteraction, InOperatorInteraction, MethodInteraction, NamedMethodInteraction, SetPropertyInteraction } from "../interactions";
import { It } from "../expected-expressions/expression-predicates";
/**
 * @hidden
 */
export class ExpressionFormatter {
    constructor(getPropertyFormatter, setPropertyFormatter, methodFormatter, namedMethodFormatter, constantFormatter, inOperatorFormatter) {
        this.getPropertyFormatter = getPropertyFormatter;
        this.setPropertyFormatter = setPropertyFormatter;
        this.methodFormatter = methodFormatter;
        this.namedMethodFormatter = namedMethodFormatter;
        this.constantFormatter = constantFormatter;
        this.inOperatorFormatter = inOperatorFormatter;
    }
    format(expression) {
        if (expression instanceof GetPropertyInteraction)
            return this.getPropertyFormatter.format(expression);
        if (expression instanceof SetPropertyInteraction)
            return this.setPropertyFormatter.format(expression);
        if (expression instanceof InOperatorInteraction)
            return this.inOperatorFormatter.format(expression);
        if (expression instanceof MethodInteraction)
            return this.methodFormatter.format(expression);
        if (expression instanceof NamedMethodInteraction)
            return this.namedMethodFormatter.format(expression);
        if (expression instanceof It)
            return this.constantFormatter.format(expression);
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1mb3JtYXR0ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtYXR0ZXJzL2V4cHJlc3Npb24tZm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIscUJBQXFCLEVBRXJCLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsc0JBQXNCLEVBQ3pCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBUW5FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQUU1QixZQUFvQixvQkFBb0QsRUFDcEQsb0JBQW9ELEVBQ3BELGVBQTBDLEVBQzFDLG9CQUFvRCxFQUNwRCxpQkFBb0MsRUFDcEMsbUJBQXdDO1FBTHhDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBZ0M7UUFDcEQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFnQztRQUNwRCxvQkFBZSxHQUFmLGVBQWUsQ0FBMkI7UUFDMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFnQztRQUNwRCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7SUFFNUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFpQztRQUMzQyxJQUFJLFVBQVUsWUFBWSxzQkFBc0I7WUFBRSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEcsSUFBSSxVQUFVLFlBQVksc0JBQXNCO1lBQUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RHLElBQUksVUFBVSxZQUFZLHFCQUFxQjtZQUFFLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRyxJQUFJLFVBQVUsWUFBWSxpQkFBaUI7WUFBRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVGLElBQUksVUFBVSxZQUFZLHNCQUFzQjtZQUFFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RyxJQUFJLFVBQVUsWUFBWSxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9FLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgR2V0UHJvcGVydHlJbnRlcmFjdGlvbixcbiAgICBJbk9wZXJhdG9ySW50ZXJhY3Rpb24sXG4gICAgSW50ZXJhY3Rpb24sXG4gICAgTWV0aG9kSW50ZXJhY3Rpb24sXG4gICAgTmFtZWRNZXRob2RJbnRlcmFjdGlvbixcbiAgICBTZXRQcm9wZXJ0eUludGVyYWN0aW9uXG59IGZyb20gXCIuLi9pbnRlcmFjdGlvbnNcIjtcbmltcG9ydCB7IEl0IH0gZnJvbSBcIi4uL2V4cGVjdGVkLWV4cHJlc3Npb25zL2V4cHJlc3Npb24tcHJlZGljYXRlc1wiO1xuaW1wb3J0IHsgR2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyIH0gZnJvbSBcIi4vZ2V0LnByb3BlcnR5LWZvcm1hdHRlclwiO1xuaW1wb3J0IHsgU2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyIH0gZnJvbSBcIi4vc2V0LnByb3BlcnR5LWZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlciB9IGZyb20gXCIuL21ldGhvZC1mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IE5hbWVkTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlciB9IGZyb20gXCIuL25hbWVkLm1ldGhvZC1mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IENvbnN0YW50Rm9ybWF0dGVyIH0gZnJvbSBcIi4vY29uc3RhbnQtZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBJbk9wZXJhdG9yRm9ybWF0dGVyIH0gZnJvbSBcIi4vaW4tb3BlcmF0b3IuZm9ybWF0dGVyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbkZvcm1hdHRlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdldFByb3BlcnR5Rm9ybWF0dGVyOiBHZXRQcm9wZXJ0eUV4cHJlc3Npb25Gb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzZXRQcm9wZXJ0eUZvcm1hdHRlcjogU2V0UHJvcGVydHlFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbWV0aG9kRm9ybWF0dGVyOiBNZXRob2RFeHByZXNzaW9uRm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbmFtZWRNZXRob2RGb3JtYXR0ZXI6IE5hbWVkTWV0aG9kRXhwcmVzc2lvbkZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnN0YW50Rm9ybWF0dGVyOiBDb25zdGFudEZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGluT3BlcmF0b3JGb3JtYXR0ZXI6IEluT3BlcmF0b3JGb3JtYXR0ZXIpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtYXQoZXhwcmVzc2lvbjogSW50ZXJhY3Rpb24gfCBJdDxhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBHZXRQcm9wZXJ0eUludGVyYWN0aW9uKSByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eUZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbik7XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgU2V0UHJvcGVydHlJbnRlcmFjdGlvbikgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHlGb3JtYXR0ZXIuZm9ybWF0KGV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEluT3BlcmF0b3JJbnRlcmFjdGlvbikgcmV0dXJuIHRoaXMuaW5PcGVyYXRvckZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbik7XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTWV0aG9kSW50ZXJhY3Rpb24pIHJldHVybiB0aGlzLm1ldGhvZEZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbik7XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTmFtZWRNZXRob2RJbnRlcmFjdGlvbikgcmV0dXJuIHRoaXMubmFtZWRNZXRob2RGb3JtYXR0ZXIuZm9ybWF0KGV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEl0KSByZXR1cm4gdGhpcy5jb25zdGFudEZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbik7XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXX0=