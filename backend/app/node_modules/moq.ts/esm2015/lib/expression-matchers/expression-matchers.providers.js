import { SetPropertyExpressionMatcher } from "./set-property.matcher";
import { ConstantMatcher } from "./constant.matcher";
import { NamedMethodExpressionMatcher } from "./instance-method.matcher";
import { ArgumentsMatcher } from "./arguments.matcher";
import { MethodExpressionMatcher } from "./method.matcher";
import { InOperatorMatcher } from "./in-operator.matcher";
import { GetPropertyExpressionMatcher } from "./get-property.matcher";
import { ExpressionMatcher } from "./expression.matcher";
/**
 * @hidden
 */
export const expressionMatchersProviders = [
    {
        provide: ExpressionMatcher,
        useClass: ExpressionMatcher,
        deps: [
            GetPropertyExpressionMatcher,
            SetPropertyExpressionMatcher,
            MethodExpressionMatcher,
            NamedMethodExpressionMatcher,
            InOperatorMatcher
        ]
    },
    { provide: SetPropertyExpressionMatcher, useClass: SetPropertyExpressionMatcher, deps: [ConstantMatcher] },
    { provide: NamedMethodExpressionMatcher, useClass: NamedMethodExpressionMatcher, deps: [ArgumentsMatcher] },
    { provide: MethodExpressionMatcher, useClass: MethodExpressionMatcher, deps: [ArgumentsMatcher] },
    { provide: InOperatorMatcher, useClass: InOperatorMatcher, deps: [] },
    { provide: GetPropertyExpressionMatcher, useClass: GetPropertyExpressionMatcher, deps: [] },
    { provide: ConstantMatcher, useClass: ConstantMatcher, deps: [] },
    { provide: ArgumentsMatcher, useClass: ArgumentsMatcher, deps: [ConstantMatcher] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1tYXRjaGVycy5wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uLW1hdGNoZXJzL2V4cHJlc3Npb24tbWF0Y2hlcnMucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHO0lBQ3ZDO1FBQ0ksT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLElBQUksRUFBRTtZQUNGLDRCQUE0QjtZQUM1Qiw0QkFBNEI7WUFDNUIsdUJBQXVCO1lBQ3ZCLDRCQUE0QjtZQUM1QixpQkFBaUI7U0FDcEI7S0FDSjtJQUNELEVBQUMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFFBQVEsRUFBRSw0QkFBNEIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBQztJQUN4RyxFQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBQztJQUN6RyxFQUFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBQztJQUMvRixFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNuRSxFQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUN6RixFQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQy9ELEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBQztDQUNuRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlciB9IGZyb20gXCIuL3NldC1wcm9wZXJ0eS5tYXRjaGVyXCI7XG5pbXBvcnQgeyBDb25zdGFudE1hdGNoZXIgfSBmcm9tIFwiLi9jb25zdGFudC5tYXRjaGVyXCI7XG5pbXBvcnQgeyBOYW1lZE1ldGhvZEV4cHJlc3Npb25NYXRjaGVyIH0gZnJvbSBcIi4vaW5zdGFuY2UtbWV0aG9kLm1hdGNoZXJcIjtcbmltcG9ydCB7IEFyZ3VtZW50c01hdGNoZXIgfSBmcm9tIFwiLi9hcmd1bWVudHMubWF0Y2hlclwiO1xuaW1wb3J0IHsgTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIgfSBmcm9tIFwiLi9tZXRob2QubWF0Y2hlclwiO1xuaW1wb3J0IHsgSW5PcGVyYXRvck1hdGNoZXIgfSBmcm9tIFwiLi9pbi1vcGVyYXRvci5tYXRjaGVyXCI7XG5pbXBvcnQgeyBHZXRQcm9wZXJ0eUV4cHJlc3Npb25NYXRjaGVyIH0gZnJvbSBcIi4vZ2V0LXByb3BlcnR5Lm1hdGNoZXJcIjtcbmltcG9ydCB7IEV4cHJlc3Npb25NYXRjaGVyIH0gZnJvbSBcIi4vZXhwcmVzc2lvbi5tYXRjaGVyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgZXhwcmVzc2lvbk1hdGNoZXJzUHJvdmlkZXJzID0gW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogRXhwcmVzc2lvbk1hdGNoZXIsXG4gICAgICAgIHVzZUNsYXNzOiBFeHByZXNzaW9uTWF0Y2hlcixcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgR2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlcixcbiAgICAgICAgICAgIFNldFByb3BlcnR5RXhwcmVzc2lvbk1hdGNoZXIsXG4gICAgICAgICAgICBNZXRob2RFeHByZXNzaW9uTWF0Y2hlcixcbiAgICAgICAgICAgIE5hbWVkTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIsXG4gICAgICAgICAgICBJbk9wZXJhdG9yTWF0Y2hlclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogU2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlciwgdXNlQ2xhc3M6IFNldFByb3BlcnR5RXhwcmVzc2lvbk1hdGNoZXIsIGRlcHM6IFtDb25zdGFudE1hdGNoZXJdfSxcbiAgICB7cHJvdmlkZTogTmFtZWRNZXRob2RFeHByZXNzaW9uTWF0Y2hlciwgdXNlQ2xhc3M6IE5hbWVkTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIsIGRlcHM6IFtBcmd1bWVudHNNYXRjaGVyXX0sXG4gICAge3Byb3ZpZGU6IE1ldGhvZEV4cHJlc3Npb25NYXRjaGVyLCB1c2VDbGFzczogTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIsIGRlcHM6IFtBcmd1bWVudHNNYXRjaGVyXX0sXG4gICAge3Byb3ZpZGU6IEluT3BlcmF0b3JNYXRjaGVyLCB1c2VDbGFzczogSW5PcGVyYXRvck1hdGNoZXIsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogR2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlciwgdXNlQ2xhc3M6IEdldFByb3BlcnR5RXhwcmVzc2lvbk1hdGNoZXIsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogQ29uc3RhbnRNYXRjaGVyLCB1c2VDbGFzczogQ29uc3RhbnRNYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IEFyZ3VtZW50c01hdGNoZXIsIHVzZUNsYXNzOiBBcmd1bWVudHNNYXRjaGVyLCBkZXBzOiBbQ29uc3RhbnRNYXRjaGVyXX0sXG5dO1xuIl19