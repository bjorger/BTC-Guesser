/*
 * Public API Surface of moq.ts
 */
export * from "./lib/moq";
export * from "./lib/mock";
export * from "./lib/dump";
export * from "./lib/interactions";
export * from "./lib/times";
export * from "./lib/playables/play-times";
export * from "./lib/expected-expressions/expected-expressions";
export * from "./lib/expected-expressions/expression-predicates";
export * from "./lib/playables/play-times";
export * from "./lib/playables/playable-exactly";
export * from "./lib/playables/playable-once";
export * from "./lib/playables/playable-never";
export * from "./lib/playables/playable-always";
export * from "./lib/playables/playable-sequence";
export * from "./lib/injector/default-injector.config";
export * from "./lib/injector/equal-matching-injector.config";
export * from "./lib/injector/injector.factory";
export * from "./lib/injector/moq.injection-token";
export * from "./lib/mock-options/mock-options.injection-token";
export * from "./lib/equal-matchers/object-matchers.injection-token";
export * from "./lib/equal-matchers/object-matcher.type";
export * from "./lib/static.injector/metadata";
export * from "./lib/static.injector/interface/injector";
export { forwardRef, isForwardRef } from "./lib/static.injector/forward_ref";
export { Injector } from "./lib/static.injector/injector";
export { INJECTOR, NullInjector } from "./lib/static.injector/injector_compatibility";
export { getClosureSafeProperty } from "./lib/static.injector/property";
export * from "./lib/static.injector/injection_token";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjLyIsInNvdXJjZXMiOlsicHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILGNBQWMsV0FBVyxDQUFDO0FBQzFCLGNBQWMsWUFBWSxDQUFDO0FBQzNCLGNBQWMsWUFBWSxDQUFDO0FBQzNCLGNBQWMsb0JBQW9CLENBQUM7QUFDbkMsY0FBYyxhQUFhLENBQUM7QUFDNUIsY0FBYyw0QkFBNEIsQ0FBQztBQUMzQyxjQUFjLGlEQUFpRCxDQUFDO0FBQ2hFLGNBQWMsa0RBQWtELENBQUM7QUFDakUsY0FBYyw0QkFBNEIsQ0FBQztBQUMzQyxjQUFjLGtDQUFrQyxDQUFDO0FBQ2pELGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyxnQ0FBZ0MsQ0FBQztBQUMvQyxjQUFjLGlDQUFpQyxDQUFDO0FBQ2hELGNBQWMsbUNBQW1DLENBQUM7QUFDbEQsY0FBYyx3Q0FBd0MsQ0FBQztBQUN2RCxjQUFjLCtDQUErQyxDQUFDO0FBQzlELGNBQWMsaUNBQWlDLENBQUM7QUFDaEQsY0FBYyxvQ0FBb0MsQ0FBQztBQUNuRCxjQUFjLGlEQUFpRCxDQUFDO0FBQ2hFLGNBQWMsc0RBQXNELENBQUM7QUFDckUsY0FBYywwQ0FBMEMsQ0FBQztBQUN6RCxjQUFjLGdDQUFnQyxDQUFDO0FBQy9DLGNBQWMsMENBQTBDLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUN0RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV4RSxjQUFjLHVDQUF1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFB1YmxpYyBBUEkgU3VyZmFjZSBvZiBtb3EudHNcbiAqL1xuXG5leHBvcnQgKiBmcm9tIFwiLi9saWIvbW9xXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvbW9ja1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2R1bXBcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9pbnRlcmFjdGlvbnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi90aW1lc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL3BsYXlhYmxlcy9wbGF5LXRpbWVzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvZXhwZWN0ZWQtZXhwcmVzc2lvbnMvZXhwZWN0ZWQtZXhwcmVzc2lvbnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9leHBlY3RlZC1leHByZXNzaW9ucy9leHByZXNzaW9uLXByZWRpY2F0ZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9wbGF5YWJsZXMvcGxheS10aW1lc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL3BsYXlhYmxlcy9wbGF5YWJsZS1leGFjdGx5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvcGxheWFibGVzL3BsYXlhYmxlLW9uY2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9wbGF5YWJsZXMvcGxheWFibGUtbmV2ZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9wbGF5YWJsZXMvcGxheWFibGUtYWx3YXlzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvcGxheWFibGVzL3BsYXlhYmxlLXNlcXVlbmNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvaW5qZWN0b3IvZGVmYXVsdC1pbmplY3Rvci5jb25maWdcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9pbmplY3Rvci9lcXVhbC1tYXRjaGluZy1pbmplY3Rvci5jb25maWdcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9pbmplY3Rvci9pbmplY3Rvci5mYWN0b3J5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvaW5qZWN0b3IvbW9xLmluamVjdGlvbi10b2tlblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL21vY2stb3B0aW9ucy9tb2NrLW9wdGlvbnMuaW5qZWN0aW9uLXRva2VuXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvZXF1YWwtbWF0Y2hlcnMvb2JqZWN0LW1hdGNoZXJzLmluamVjdGlvbi10b2tlblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2VxdWFsLW1hdGNoZXJzL29iamVjdC1tYXRjaGVyLnR5cGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9zdGF0aWMuaW5qZWN0b3IvbWV0YWRhdGFcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpYi9zdGF0aWMuaW5qZWN0b3IvaW50ZXJmYWNlL2luamVjdG9yXCI7XG5leHBvcnQgeyBmb3J3YXJkUmVmLCBpc0ZvcndhcmRSZWYgfSBmcm9tIFwiLi9saWIvc3RhdGljLmluamVjdG9yL2ZvcndhcmRfcmVmXCI7XG5leHBvcnQgeyBJbmplY3RvciB9IGZyb20gXCIuL2xpYi9zdGF0aWMuaW5qZWN0b3IvaW5qZWN0b3JcIjtcbmV4cG9ydCB7IElOSkVDVE9SLCBOdWxsSW5qZWN0b3IgfSBmcm9tIFwiLi9saWIvc3RhdGljLmluamVjdG9yL2luamVjdG9yX2NvbXBhdGliaWxpdHlcIjtcbmV4cG9ydCB7IGdldENsb3N1cmVTYWZlUHJvcGVydHkgfSBmcm9tIFwiLi9saWIvc3RhdGljLmluamVjdG9yL3Byb3BlcnR5XCI7XG5leHBvcnQgeyBTdGF0aWNQcm92aWRlciB9IGZyb20gXCIuL2xpYi9zdGF0aWMuaW5qZWN0b3IvaW50ZXJmYWNlL3Byb3ZpZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvc3RhdGljLmluamVjdG9yL2luamVjdGlvbl90b2tlblwiO1xuXG4iXX0=