import { It } from "./expression-predicates";
import { ExpectedGetPropertyExpression, ExpectedInOperatorExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression, ExpectedSetPropertyExpression } from "./expected-expressions";
/**
 * This class reflects an expression to an expression tree representation.
 *
 * @example
 * ```typescript
 *
 * const arg = 'argument';
 * const reflector = new ExpectedExpressionReflector();
 * const actual = reflector.reflect<any>(instance => instance(arg));
 *
 * const expected = new ExpectedMethodExpression([arg]);
 * expect(actual).toEqual(expected);
 * ```
 *
 * For more examples check
 * [unit tests for this class]
 * (https://github.com/dvabuzyarov/moq.ts/blob/master/tests.unit/expected-expressions/expected-expression-reflector.UnitTests.ts)
 */
export class ExpectedExpressionReflector {
    /**
     * Reflects the provided code as an expression tree.
     */
    reflect(expression) {
        this.reflectedInfo = undefined;
        const proxy = this.expressionProxy();
        const predicate = expression(proxy);
        return predicate instanceof It && (this.reflectedInfo instanceof ExpectedSetPropertyExpression) === false
            ? predicate : this.reflectedInfo;
    }
    expressionProxy() {
        const options = {
            get: (target, name) => {
                this.reflectedInfo = new ExpectedGetPropertyExpression(name);
                return (...args) => {
                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);
                };
            },
            set: (target, name, value) => {
                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);
                return true;
            },
            apply: (target, thisArg, args) => {
                this.reflectedInfo = new ExpectedMethodExpression(args);
            },
            has: (target, name) => {
                this.reflectedInfo = new ExpectedInOperatorExpression(name);
                return true;
            }
        };
        return new Proxy(() => undefined, options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZWN0ZWQtZXhwcmVzc2lvbi1yZWZsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9leHBlY3RlZC1leHByZXNzaW9ucy9leHBlY3RlZC1leHByZXNzaW9uLXJlZmxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0MsT0FBTyxFQUVILDZCQUE2QixFQUM3Qiw0QkFBNEIsRUFDNUIsd0JBQXdCLEVBQ3hCLDZCQUE2QixFQUM3Qiw2QkFBNkIsRUFDaEMsTUFBTSx3QkFBd0IsQ0FBQztBQVNoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBSXBDOztPQUVHO0lBQ0ksT0FBTyxDQUFJLFVBQWtDO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO1FBRS9CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNyQyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFcEMsT0FBTyxTQUFTLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsWUFBWSw2QkFBNkIsQ0FBQyxLQUFLLEtBQUs7WUFDckcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUN6QyxDQUFDO0lBRU8sZUFBZTtRQUVuQixNQUFNLE9BQU8sR0FBRztZQUNaLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3RCxPQUFPLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtvQkFDZixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksNkJBQTZCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN2RSxDQUFDLENBQUM7WUFDTixDQUFDO1lBRUQsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDZCQUE2QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDcEUsT0FBTyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1RCxDQUFDO1lBRUQsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNsQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksNEJBQTRCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzVELE9BQU8sSUFBSSxDQUFDO1lBQ2hCLENBQUM7U0FDSixDQUFDO1FBRUYsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXQgfSBmcm9tIFwiLi9leHByZXNzaW9uLXByZWRpY2F0ZXNcIjtcclxuaW1wb3J0IHtcclxuICAgIEV4cGVjdGVkRXhwcmVzc2lvbnMsXHJcbiAgICBFeHBlY3RlZEdldFByb3BlcnR5RXhwcmVzc2lvbixcclxuICAgIEV4cGVjdGVkSW5PcGVyYXRvckV4cHJlc3Npb24sXHJcbiAgICBFeHBlY3RlZE1ldGhvZEV4cHJlc3Npb24sXHJcbiAgICBFeHBlY3RlZE5hbWVkTWV0aG9kRXhwcmVzc2lvbixcclxuICAgIEV4cGVjdGVkU2V0UHJvcGVydHlFeHByZXNzaW9uXHJcbn0gZnJvbSBcIi4vZXhwZWN0ZWQtZXhwcmVzc2lvbnNcIjtcclxuXHJcbi8qKlxyXG4gKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIFtQcm94eV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkpXHJcbiAqIGFuZCBlaXRoZXIgcGxheXMgZXhwZWN0ZWQgaW50ZXJhY3Rpb24gb3IgcmV0dXJucyBhIHByZWRpY2F0ZSBmdW5jdGlvbi5cclxuICogU2VlIHtAbGluayBJTW9jay5zZXR1cH0gZnVuY3Rpb24gYW5kIHtAbGluayBJdH0gY2xhc3MgZm9yIG1vcmUgZGV0YWlscy5cclxuICovXHJcbmV4cG9ydCB0eXBlIElFeHBlY3RlZEV4cHJlc3Npb248VD4gPSAoaW5zdGFuY2U6IFQpID0+IHZvaWQgfCBhbnkgfCBJdDxUPjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlZmxlY3RzIGFuIGV4cHJlc3Npb24gdG8gYW4gZXhwcmVzc2lvbiB0cmVlIHJlcHJlc2VudGF0aW9uLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqXHJcbiAqIGNvbnN0IGFyZyA9ICdhcmd1bWVudCc7XHJcbiAqIGNvbnN0IHJlZmxlY3RvciA9IG5ldyBFeHBlY3RlZEV4cHJlc3Npb25SZWZsZWN0b3IoKTtcclxuICogY29uc3QgYWN0dWFsID0gcmVmbGVjdG9yLnJlZmxlY3Q8YW55PihpbnN0YW5jZSA9PiBpbnN0YW5jZShhcmcpKTtcclxuICpcclxuICogY29uc3QgZXhwZWN0ZWQgPSBuZXcgRXhwZWN0ZWRNZXRob2RFeHByZXNzaW9uKFthcmddKTtcclxuICogZXhwZWN0KGFjdHVhbCkudG9FcXVhbChleHBlY3RlZCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBGb3IgbW9yZSBleGFtcGxlcyBjaGVja1xyXG4gKiBbdW5pdCB0ZXN0cyBmb3IgdGhpcyBjbGFzc11cclxuICogKGh0dHBzOi8vZ2l0aHViLmNvbS9kdmFidXp5YXJvdi9tb3EudHMvYmxvYi9tYXN0ZXIvdGVzdHMudW5pdC9leHBlY3RlZC1leHByZXNzaW9ucy9leHBlY3RlZC1leHByZXNzaW9uLXJlZmxlY3Rvci5Vbml0VGVzdHMudHMpXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXhwZWN0ZWRFeHByZXNzaW9uUmVmbGVjdG9yIHtcclxuXHJcbiAgICBwcml2YXRlIHJlZmxlY3RlZEluZm87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZsZWN0cyB0aGUgcHJvdmlkZWQgY29kZSBhcyBhbiBleHByZXNzaW9uIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWZsZWN0PFQ+KGV4cHJlc3Npb246IElFeHBlY3RlZEV4cHJlc3Npb248VD4pOiBFeHBlY3RlZEV4cHJlc3Npb25zPFQ+IHtcclxuICAgICAgICB0aGlzLnJlZmxlY3RlZEluZm8gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3h5ID0gdGhpcy5leHByZXNzaW9uUHJveHkoKTtcclxuICAgICAgICBjb25zdCBwcmVkaWNhdGUgPSBleHByZXNzaW9uKHByb3h5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSBpbnN0YW5jZW9mIEl0ICYmICh0aGlzLnJlZmxlY3RlZEluZm8gaW5zdGFuY2VvZiBFeHBlY3RlZFNldFByb3BlcnR5RXhwcmVzc2lvbikgPT09IGZhbHNlXHJcbiAgICAgICAgICAgID8gcHJlZGljYXRlIDogdGhpcy5yZWZsZWN0ZWRJbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXhwcmVzc2lvblByb3h5KCk6IGFueSB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGdldDogKHRhcmdldCwgbmFtZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZsZWN0ZWRJbmZvID0gbmV3IEV4cGVjdGVkR2V0UHJvcGVydHlFeHByZXNzaW9uKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZsZWN0ZWRJbmZvID0gbmV3IEV4cGVjdGVkTmFtZWRNZXRob2RFeHByZXNzaW9uKG5hbWUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHNldDogKHRhcmdldCwgbmFtZSwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVmbGVjdGVkSW5mbyA9IG5ldyBFeHBlY3RlZFNldFByb3BlcnR5RXhwcmVzc2lvbihuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGFwcGx5OiAodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmxlY3RlZEluZm8gPSBuZXcgRXhwZWN0ZWRNZXRob2RFeHByZXNzaW9uKGFyZ3MpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgaGFzOiAodGFyZ2V0LCBuYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmxlY3RlZEluZm8gPSBuZXcgRXhwZWN0ZWRJbk9wZXJhdG9yRXhwcmVzc2lvbihuYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSgoKSA9PiB1bmRlZmluZWQsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==