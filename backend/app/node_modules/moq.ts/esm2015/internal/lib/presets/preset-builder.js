import { MimicsPreset } from "./presets/mimics.preset";
import { ReturnsPreset } from "./presets/returns.preset";
import { ThrowsPreset } from "./presets/throws.preset";
import { CallbacksPreset } from "./presets/callbacks.preset";
import { PlayTimes } from "../playables/play-times";
/**
 * The default implementation of {@link IPresetBuilder} interface.
 * Is it not intended to be used outside of the moq library.
 *
 * @hidden
 */
export class PresetBuilder {
    constructor(mock, set, target, playable = PlayTimes.Always()) {
        this.mock = mock;
        this.set = set;
        this.target = target;
        this.playable = playable;
    }
    mimics(origin) {
        const preset = new MimicsPreset(this.playable, this.target, origin);
        this.set(preset);
        return this.mock;
    }
    returns(value) {
        const preset = new ReturnsPreset(this.playable, this.target, value);
        this.set(preset);
        return this.mock;
    }
    throws(exception) {
        const preset = new ThrowsPreset(this.playable, this.target, exception);
        this.set(preset);
        return this.mock;
    }
    callback(callback) {
        const preset = new CallbacksPreset(this.playable, this.target, callback);
        this.set(preset);
        return this.mock;
    }
    play(playable) {
        this.playable = playable;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wcmVzZXRzL3ByZXNldC1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQUV0QixZQUNZLElBQWMsRUFDZCxHQUFpQyxFQUNqQyxNQUE4QixFQUM5QixXQUFzQixTQUFTLENBQUMsTUFBTSxFQUFFO1FBSHhDLFNBQUksR0FBSixJQUFJLENBQVU7UUFDZCxRQUFHLEdBQUgsR0FBRyxDQUE4QjtRQUNqQyxXQUFNLEdBQU4sTUFBTSxDQUF3QjtRQUM5QixhQUFRLEdBQVIsUUFBUSxDQUFnQztJQUVwRCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQVM7UUFDbkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxPQUFPLENBQUMsS0FBYTtRQUN4QixNQUFNLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVNLE1BQU0sQ0FBYSxTQUFxQjtRQUMzQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUE4QztRQUMxRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVNLElBQUksQ0FBQyxRQUFtQjtRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTW9jaywgSVBsYXlhYmxlLCBJUHJlc2V0QnVpbGRlciB9IGZyb20gXCIuLi9tb3FcIjtcbmltcG9ydCB7IEV4cGVjdGVkRXhwcmVzc2lvbnMgfSBmcm9tIFwiLi4vZXhwZWN0ZWQtZXhwcmVzc2lvbnMvZXhwZWN0ZWQtZXhwcmVzc2lvbnNcIjtcbmltcG9ydCB7IElQcmVzZXQgfSBmcm9tIFwiLi9wcmVzZXRzL3ByZXNldFwiO1xuaW1wb3J0IHsgTWltaWNzUHJlc2V0IH0gZnJvbSBcIi4vcHJlc2V0cy9taW1pY3MucHJlc2V0XCI7XG5pbXBvcnQgeyBSZXR1cm5zUHJlc2V0IH0gZnJvbSBcIi4vcHJlc2V0cy9yZXR1cm5zLnByZXNldFwiO1xuaW1wb3J0IHsgVGhyb3dzUHJlc2V0IH0gZnJvbSBcIi4vcHJlc2V0cy90aHJvd3MucHJlc2V0XCI7XG5pbXBvcnQgeyBDYWxsYmFja3NQcmVzZXQgfSBmcm9tIFwiLi9wcmVzZXRzL2NhbGxiYWNrcy5wcmVzZXRcIjtcbmltcG9ydCB7IEludGVyYWN0aW9uIH0gZnJvbSBcIi4uL2ludGVyYWN0aW9uc1wiO1xuaW1wb3J0IHsgUGxheVRpbWVzIH0gZnJvbSBcIi4uL3BsYXlhYmxlcy9wbGF5LXRpbWVzXCI7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIElQcmVzZXRCdWlsZGVyfSBpbnRlcmZhY2UuXG4gKiBJcyBpdCBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBtb3EgbGlicmFyeS5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcmVzZXRCdWlsZGVyPFQsIFRWYWx1ZSA9IGFueT4gaW1wbGVtZW50cyBJUHJlc2V0QnVpbGRlcjxUPiB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBtb2NrOiBJTW9jazxUPixcbiAgICAgICAgcHJpdmF0ZSBzZXQ6IChwcmVzZXQ6IElQcmVzZXQ8VD4pID0+IHZvaWQsXG4gICAgICAgIHByaXZhdGUgdGFyZ2V0OiBFeHBlY3RlZEV4cHJlc3Npb25zPFQ+LFxuICAgICAgICBwcml2YXRlIHBsYXlhYmxlOiBJUGxheWFibGUgPSBQbGF5VGltZXMuQWx3YXlzKCkpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBtaW1pY3Mob3JpZ2luOiBUKTogSU1vY2s8VD4ge1xuICAgICAgICBjb25zdCBwcmVzZXQgPSBuZXcgTWltaWNzUHJlc2V0KHRoaXMucGxheWFibGUsIHRoaXMudGFyZ2V0LCBvcmlnaW4pO1xuICAgICAgICB0aGlzLnNldChwcmVzZXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5tb2NrO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXR1cm5zKHZhbHVlOiBUVmFsdWUpOiBJTW9jazxUPiB7XG4gICAgICAgIGNvbnN0IHByZXNldCA9IG5ldyBSZXR1cm5zUHJlc2V0KHRoaXMucGxheWFibGUsIHRoaXMudGFyZ2V0LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2V0KHByZXNldCk7XG4gICAgICAgIHJldHVybiB0aGlzLm1vY2s7XG4gICAgfVxuXG4gICAgcHVibGljIHRocm93czxURXhjZXB0aW9uPihleGNlcHRpb246IFRFeGNlcHRpb24pOiBJTW9jazxUPiB7XG4gICAgICAgIGNvbnN0IHByZXNldCA9IG5ldyBUaHJvd3NQcmVzZXQodGhpcy5wbGF5YWJsZSwgdGhpcy50YXJnZXQsIGV4Y2VwdGlvbik7XG4gICAgICAgIHRoaXMuc2V0KHByZXNldCk7XG4gICAgICAgIHJldHVybiB0aGlzLm1vY2s7XG4gICAgfVxuXG4gICAgcHVibGljIGNhbGxiYWNrKGNhbGxiYWNrOiAoaW50ZXJhY3Rpb246IEludGVyYWN0aW9uKSA9PiBUVmFsdWUpOiBJTW9jazxUPiB7XG4gICAgICAgIGNvbnN0IHByZXNldCA9IG5ldyBDYWxsYmFja3NQcmVzZXQodGhpcy5wbGF5YWJsZSwgdGhpcy50YXJnZXQsIGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5zZXQocHJlc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9jaztcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheShwbGF5YWJsZTogSVBsYXlhYmxlKTogSVByZXNldEJ1aWxkZXI8VD4ge1xuICAgICAgICB0aGlzLnBsYXlhYmxlID0gcGxheWFibGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiJdfQ==