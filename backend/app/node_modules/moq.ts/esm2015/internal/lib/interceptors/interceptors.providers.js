import { ApplyTrap } from "./apply.trap";
import { Tracker } from "../tracker/tracker";
import { InteractionPlayer } from "../interaction-players/interaction.player";
import { GetTrap } from "./get.trap";
import { PropertiesValueStorage } from "./properties-value.storage";
import { HasPropertyExplorer } from "../explorers/has-property.explorer/has-property.explorer";
import { HasMethodExplorer } from "../explorers/has-method.explorer/has-method.explorer";
import { SpyFunctionProvider } from "./spy-function.provider";
import { GetPrototypeOfTrap } from "./get-prototype-of.trap";
import { PrototypeStorage } from "./prototype.storage";
import { HasTrap } from "./has.trap";
import { InOperatorInteractionExplorer } from "../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer";
import { PresetPlayablesUpdater } from "../playables/preset-playables.updater";
import { SetTrap } from "./set.trap";
import { SetPrototypeOfTrap } from "./set-prototype-of.trap";
import { ProxyFactory } from "./proxy.factory";
import { MOCK } from "../injector/moq.injection-token";
import { MOCK_OPTIONS } from "../mock-options/mock-options.injection-token";
import { PropertyIsReadOnlyTester } from "../explorers/has-property.explorer/property-is-read-only.tester";
const ɵ0 = ({ target }) => new PrototypeStorage(target);
/**
 * @hidden
 */
export const interceptorsProviders = [
    {
        provide: ProxyFactory, useClass: ProxyFactory, deps: [
            MOCK_OPTIONS,
            GetTrap,
            SetTrap,
            HasTrap,
            ApplyTrap,
            GetPrototypeOfTrap,
            SetPrototypeOfTrap
        ]
    },
    { provide: ApplyTrap, useClass: ApplyTrap, deps: [Tracker, InteractionPlayer] },
    {
        provide: GetTrap, useClass: GetTrap, deps: [
            MOCK,
            Tracker,
            PropertiesValueStorage,
            InteractionPlayer,
            HasPropertyExplorer,
            HasMethodExplorer,
            SpyFunctionProvider
        ]
    },
    { provide: GetPrototypeOfTrap, useClass: GetPrototypeOfTrap, deps: [PrototypeStorage] },
    {
        provide: HasTrap, useClass: HasTrap, deps: [
            Tracker,
            PropertiesValueStorage,
            InteractionPlayer,
            InOperatorInteractionExplorer,
            HasPropertyExplorer,
            HasMethodExplorer,
            PresetPlayablesUpdater
        ]
    },
    { provide: PropertiesValueStorage, useClass: PropertiesValueStorage, deps: [] },
    { provide: PrototypeStorage, useFactory: ɵ0, deps: [MOCK_OPTIONS] },
    { provide: SetTrap, useClass: SetTrap, deps: [Tracker, PropertiesValueStorage, InteractionPlayer, PropertyIsReadOnlyTester] },
    { provide: SetPrototypeOfTrap, useClass: SetPrototypeOfTrap, deps: [PrototypeStorage] },
    { provide: SpyFunctionProvider, useClass: SpyFunctionProvider, deps: [Tracker, InteractionPlayer] },
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3JzLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjLyIsInNvdXJjZXMiOlsibGliL2ludGVyY2VwdG9ycy9pbnRlcmNlcHRvcnMucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDL0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDekYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxnRkFBZ0YsQ0FBQztBQUMvSCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQzVFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlFQUFpRSxDQUFDO1dBMEMvRCxDQUFDLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0FBeEN0Rjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ2pDO1FBQ0ksT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRTtZQUNqRCxZQUFZO1lBQ1osT0FBTztZQUNQLE9BQU87WUFDUCxPQUFPO1lBQ1AsU0FBUztZQUNULGtCQUFrQjtZQUNsQixrQkFBa0I7U0FDckI7S0FDSjtJQUNELEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxFQUFDO0lBQzdFO1FBQ0ksT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtZQUN2QyxJQUFJO1lBQ0osT0FBTztZQUNQLHNCQUFzQjtZQUN0QixpQkFBaUI7WUFDakIsbUJBQW1CO1lBQ25CLGlCQUFpQjtZQUNqQixtQkFBbUI7U0FDdEI7S0FDSjtJQUNELEVBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDO0lBQ3JGO1FBQ0ksT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtZQUN2QyxPQUFPO1lBQ1Asc0JBQXNCO1lBQ3RCLGlCQUFpQjtZQUNqQiw2QkFBNkI7WUFDN0IsbUJBQW1CO1lBQ25CLGlCQUFpQjtZQUNqQixzQkFBc0I7U0FDekI7S0FDSjtJQUNELEVBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQzdFLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsSUFBNEMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBQztJQUN6RyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsaUJBQWlCLEVBQUUsd0JBQXdCLENBQUMsRUFBQztJQUMzSCxFQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBQztJQUNyRixFQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLEVBQUM7Q0FDcEcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGx5VHJhcCB9IGZyb20gXCIuL2FwcGx5LnRyYXBcIjtcbmltcG9ydCB7IFRyYWNrZXIgfSBmcm9tIFwiLi4vdHJhY2tlci90cmFja2VyXCI7XG5pbXBvcnQgeyBJbnRlcmFjdGlvblBsYXllciB9IGZyb20gXCIuLi9pbnRlcmFjdGlvbi1wbGF5ZXJzL2ludGVyYWN0aW9uLnBsYXllclwiO1xuaW1wb3J0IHsgR2V0VHJhcCB9IGZyb20gXCIuL2dldC50cmFwXCI7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzVmFsdWVTdG9yYWdlIH0gZnJvbSBcIi4vcHJvcGVydGllcy12YWx1ZS5zdG9yYWdlXCI7XG5pbXBvcnQgeyBIYXNQcm9wZXJ0eUV4cGxvcmVyIH0gZnJvbSBcIi4uL2V4cGxvcmVycy9oYXMtcHJvcGVydHkuZXhwbG9yZXIvaGFzLXByb3BlcnR5LmV4cGxvcmVyXCI7XG5pbXBvcnQgeyBIYXNNZXRob2RFeHBsb3JlciB9IGZyb20gXCIuLi9leHBsb3JlcnMvaGFzLW1ldGhvZC5leHBsb3Jlci9oYXMtbWV0aG9kLmV4cGxvcmVyXCI7XG5pbXBvcnQgeyBTcHlGdW5jdGlvblByb3ZpZGVyIH0gZnJvbSBcIi4vc3B5LWZ1bmN0aW9uLnByb3ZpZGVyXCI7XG5pbXBvcnQgeyBHZXRQcm90b3R5cGVPZlRyYXAgfSBmcm9tIFwiLi9nZXQtcHJvdG90eXBlLW9mLnRyYXBcIjtcbmltcG9ydCB7IFByb3RvdHlwZVN0b3JhZ2UgfSBmcm9tIFwiLi9wcm90b3R5cGUuc3RvcmFnZVwiO1xuaW1wb3J0IHsgSGFzVHJhcCB9IGZyb20gXCIuL2hhcy50cmFwXCI7XG5pbXBvcnQgeyBJbk9wZXJhdG9ySW50ZXJhY3Rpb25FeHBsb3JlciB9IGZyb20gXCIuLi9leHBsb3JlcnMvaW4tb3BlcmF0b3ItaW50ZXJhY3Rpb24uZXhwbG9yZXIvaW4tb3BlcmF0b3ItaW50ZXJhY3Rpb24uZXhwbG9yZXJcIjtcbmltcG9ydCB7IFByZXNldFBsYXlhYmxlc1VwZGF0ZXIgfSBmcm9tIFwiLi4vcGxheWFibGVzL3ByZXNldC1wbGF5YWJsZXMudXBkYXRlclwiO1xuaW1wb3J0IHsgU2V0VHJhcCB9IGZyb20gXCIuL3NldC50cmFwXCI7XG5pbXBvcnQgeyBTZXRQcm90b3R5cGVPZlRyYXAgfSBmcm9tIFwiLi9zZXQtcHJvdG90eXBlLW9mLnRyYXBcIjtcbmltcG9ydCB7IFByb3h5RmFjdG9yeSB9IGZyb20gXCIuL3Byb3h5LmZhY3RvcnlcIjtcbmltcG9ydCB7IE1PQ0sgfSBmcm9tIFwiLi4vaW5qZWN0b3IvbW9xLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgTU9DS19PUFRJT05TIH0gZnJvbSBcIi4uL21vY2stb3B0aW9ucy9tb2NrLW9wdGlvbnMuaW5qZWN0aW9uLXRva2VuXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUlzUmVhZE9ubHlUZXN0ZXIgfSBmcm9tIFwiLi4vZXhwbG9yZXJzL2hhcy1wcm9wZXJ0eS5leHBsb3Jlci9wcm9wZXJ0eS1pcy1yZWFkLW9ubHkudGVzdGVyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgaW50ZXJjZXB0b3JzUHJvdmlkZXJzID0gW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogUHJveHlGYWN0b3J5LCB1c2VDbGFzczogUHJveHlGYWN0b3J5LCBkZXBzOiBbXG4gICAgICAgICAgICBNT0NLX09QVElPTlMsXG4gICAgICAgICAgICBHZXRUcmFwLFxuICAgICAgICAgICAgU2V0VHJhcCxcbiAgICAgICAgICAgIEhhc1RyYXAsXG4gICAgICAgICAgICBBcHBseVRyYXAsXG4gICAgICAgICAgICBHZXRQcm90b3R5cGVPZlRyYXAsXG4gICAgICAgICAgICBTZXRQcm90b3R5cGVPZlRyYXBcbiAgICAgICAgXVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IEFwcGx5VHJhcCwgdXNlQ2xhc3M6IEFwcGx5VHJhcCwgZGVwczogW1RyYWNrZXIsIEludGVyYWN0aW9uUGxheWVyXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBHZXRUcmFwLCB1c2VDbGFzczogR2V0VHJhcCwgZGVwczogW1xuICAgICAgICAgICAgTU9DSyxcbiAgICAgICAgICAgIFRyYWNrZXIsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzVmFsdWVTdG9yYWdlLFxuICAgICAgICAgICAgSW50ZXJhY3Rpb25QbGF5ZXIsXG4gICAgICAgICAgICBIYXNQcm9wZXJ0eUV4cGxvcmVyLFxuICAgICAgICAgICAgSGFzTWV0aG9kRXhwbG9yZXIsXG4gICAgICAgICAgICBTcHlGdW5jdGlvblByb3ZpZGVyXG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtwcm92aWRlOiBHZXRQcm90b3R5cGVPZlRyYXAsIHVzZUNsYXNzOiBHZXRQcm90b3R5cGVPZlRyYXAsIGRlcHM6IFtQcm90b3R5cGVTdG9yYWdlXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBIYXNUcmFwLCB1c2VDbGFzczogSGFzVHJhcCwgZGVwczogW1xuICAgICAgICAgICAgVHJhY2tlcixcbiAgICAgICAgICAgIFByb3BlcnRpZXNWYWx1ZVN0b3JhZ2UsXG4gICAgICAgICAgICBJbnRlcmFjdGlvblBsYXllcixcbiAgICAgICAgICAgIEluT3BlcmF0b3JJbnRlcmFjdGlvbkV4cGxvcmVyLFxuICAgICAgICAgICAgSGFzUHJvcGVydHlFeHBsb3JlcixcbiAgICAgICAgICAgIEhhc01ldGhvZEV4cGxvcmVyLFxuICAgICAgICAgICAgUHJlc2V0UGxheWFibGVzVXBkYXRlclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogUHJvcGVydGllc1ZhbHVlU3RvcmFnZSwgdXNlQ2xhc3M6IFByb3BlcnRpZXNWYWx1ZVN0b3JhZ2UsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogUHJvdG90eXBlU3RvcmFnZSwgdXNlRmFjdG9yeTogKHt0YXJnZXR9KSA9PiBuZXcgUHJvdG90eXBlU3RvcmFnZSh0YXJnZXQpLCBkZXBzOiBbTU9DS19PUFRJT05TXX0sXG4gICAge3Byb3ZpZGU6IFNldFRyYXAsIHVzZUNsYXNzOiBTZXRUcmFwLCBkZXBzOiBbVHJhY2tlciwgUHJvcGVydGllc1ZhbHVlU3RvcmFnZSwgSW50ZXJhY3Rpb25QbGF5ZXIsIFByb3BlcnR5SXNSZWFkT25seVRlc3Rlcl19LFxuICAgIHtwcm92aWRlOiBTZXRQcm90b3R5cGVPZlRyYXAsIHVzZUNsYXNzOiBTZXRQcm90b3R5cGVPZlRyYXAsIGRlcHM6IFtQcm90b3R5cGVTdG9yYWdlXX0sXG4gICAge3Byb3ZpZGU6IFNweUZ1bmN0aW9uUHJvdmlkZXIsIHVzZUNsYXNzOiBTcHlGdW5jdGlvblByb3ZpZGVyLCBkZXBzOiBbVHJhY2tlciwgSW50ZXJhY3Rpb25QbGF5ZXJdfSxcbl07XG4iXX0=