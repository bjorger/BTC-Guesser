import { GetPropertyInteraction, InOperatorInteraction, MethodInteraction, NamedMethodInteraction, SetPropertyInteraction } from "../interactions";
import { ExpectedGetPropertyExpression, ExpectedInOperatorExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression, ExpectedSetPropertyExpression } from "../expected-expressions/expected-expressions";
import { It } from "../expected-expressions/expression-predicates";
/**
 * @hidden
 */
export class ExpressionMatcher {
    constructor(getPropertyExpressionMatcher, setPropertyExpressionMatcher, methodExpressionMatcher, namedMethodExpressionMatcher, inOperatorExpressionMatcher) {
        this.getPropertyExpressionMatcher = getPropertyExpressionMatcher;
        this.setPropertyExpressionMatcher = setPropertyExpressionMatcher;
        this.methodExpressionMatcher = methodExpressionMatcher;
        this.namedMethodExpressionMatcher = namedMethodExpressionMatcher;
        this.inOperatorExpressionMatcher = inOperatorExpressionMatcher;
    }
    matched(left, right) {
        if (left === right)
            return true;
        if (right === undefined)
            return true;
        if (left instanceof GetPropertyInteraction && (right instanceof ExpectedGetPropertyExpression || right instanceof It)) {
            return this.getPropertyExpressionMatcher.matched(left, right);
        }
        if (left instanceof SetPropertyInteraction && (right instanceof ExpectedSetPropertyExpression || right instanceof It)) {
            return this.setPropertyExpressionMatcher.matched(left, right);
        }
        if (left instanceof InOperatorInteraction && (right instanceof ExpectedInOperatorExpression || right instanceof It)) {
            return this.inOperatorExpressionMatcher.matched(left, right);
        }
        if (left instanceof MethodInteraction && (right instanceof ExpectedMethodExpression || right instanceof It)) {
            return this.methodExpressionMatcher.matched(left, right);
        }
        if (left instanceof NamedMethodInteraction && (right instanceof ExpectedNamedMethodExpression || right instanceof It)) {
            return this.namedMethodExpressionMatcher.matched(left, right);
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi5tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21vcS9zcmMvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi1tYXRjaGVycy9leHByZXNzaW9uLm1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUNILHNCQUFzQixFQUN0QixxQkFBcUIsRUFFckIsaUJBQWlCLEVBQ2pCLHNCQUFzQixFQUN0QixzQkFBc0IsRUFDekIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBRUgsNkJBQTZCLEVBQzdCLDRCQUE0QixFQUM1Qix3QkFBd0IsRUFDeEIsNkJBQTZCLEVBQzdCLDZCQUE2QixFQUNoQyxNQUFNLDhDQUE4QyxDQUFDO0FBQ3RELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUduRTs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFFMUIsWUFBb0IsNEJBQTBELEVBQzFELDRCQUEwRCxFQUMxRCx1QkFBZ0QsRUFDaEQsNEJBQTBELEVBQzFELDJCQUE4QztRQUo5QyxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQThCO1FBQzFELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUFDMUQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQThCO1FBQzFELGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBbUI7SUFFbEUsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFpQixFQUFFLEtBQStCO1FBRTdELElBQUksSUFBSSxLQUFLLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNoQyxJQUFJLEtBQUssS0FBSyxTQUFTO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFckMsSUFBSSxJQUFJLFlBQVksc0JBQXNCLElBQUksQ0FBQyxLQUFLLFlBQVksNkJBQTZCLElBQUksS0FBSyxZQUFZLEVBQUUsQ0FBQyxFQUFFO1lBQ25ILE9BQU8sSUFBSSxDQUFDLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakU7UUFDRCxJQUFJLElBQUksWUFBWSxzQkFBc0IsSUFBSSxDQUFDLEtBQUssWUFBWSw2QkFBNkIsSUFBSSxLQUFLLFlBQVksRUFBRSxDQUFDLEVBQUU7WUFDbkgsT0FBTyxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqRTtRQUNELElBQUksSUFBSSxZQUFZLHFCQUFxQixJQUFJLENBQUMsS0FBSyxZQUFZLDRCQUE0QixJQUFJLEtBQUssWUFBWSxFQUFFLENBQUMsRUFBRTtZQUNqSCxPQUFPLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsSUFBSSxJQUFJLFlBQVksaUJBQWlCLElBQUksQ0FBQyxLQUFLLFlBQVksd0JBQXdCLElBQUksS0FBSyxZQUFZLEVBQUUsQ0FBQyxFQUFFO1lBQ3pHLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxJQUFJLElBQUksWUFBWSxzQkFBc0IsSUFBSSxDQUFDLEtBQUssWUFBWSw2QkFBNkIsSUFBSSxLQUFLLFlBQVksRUFBRSxDQUFDLEVBQUU7WUFDbkgsT0FBTyxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqRTtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdldFByb3BlcnR5RXhwcmVzc2lvbk1hdGNoZXIgfSBmcm9tIFwiLi9nZXQtcHJvcGVydHkubWF0Y2hlclwiO1xuaW1wb3J0IHsgU2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlciB9IGZyb20gXCIuL3NldC1wcm9wZXJ0eS5tYXRjaGVyXCI7XG5pbXBvcnQgeyBNZXRob2RFeHByZXNzaW9uTWF0Y2hlciB9IGZyb20gXCIuL21ldGhvZC5tYXRjaGVyXCI7XG5pbXBvcnQgeyBOYW1lZE1ldGhvZEV4cHJlc3Npb25NYXRjaGVyIH0gZnJvbSBcIi4vaW5zdGFuY2UtbWV0aG9kLm1hdGNoZXJcIjtcbmltcG9ydCB7XG4gICAgR2V0UHJvcGVydHlJbnRlcmFjdGlvbixcbiAgICBJbk9wZXJhdG9ySW50ZXJhY3Rpb24sXG4gICAgSW50ZXJhY3Rpb24sXG4gICAgTWV0aG9kSW50ZXJhY3Rpb24sXG4gICAgTmFtZWRNZXRob2RJbnRlcmFjdGlvbixcbiAgICBTZXRQcm9wZXJ0eUludGVyYWN0aW9uXG59IGZyb20gXCIuLi9pbnRlcmFjdGlvbnNcIjtcbmltcG9ydCB7XG4gICAgRXhwZWN0ZWRFeHByZXNzaW9ucyxcbiAgICBFeHBlY3RlZEdldFByb3BlcnR5RXhwcmVzc2lvbixcbiAgICBFeHBlY3RlZEluT3BlcmF0b3JFeHByZXNzaW9uLFxuICAgIEV4cGVjdGVkTWV0aG9kRXhwcmVzc2lvbixcbiAgICBFeHBlY3RlZE5hbWVkTWV0aG9kRXhwcmVzc2lvbixcbiAgICBFeHBlY3RlZFNldFByb3BlcnR5RXhwcmVzc2lvblxufSBmcm9tIFwiLi4vZXhwZWN0ZWQtZXhwcmVzc2lvbnMvZXhwZWN0ZWQtZXhwcmVzc2lvbnNcIjtcbmltcG9ydCB7IEl0IH0gZnJvbSBcIi4uL2V4cGVjdGVkLWV4cHJlc3Npb25zL2V4cHJlc3Npb24tcHJlZGljYXRlc1wiO1xuaW1wb3J0IHsgSW5PcGVyYXRvck1hdGNoZXIgfSBmcm9tIFwiLi9pbi1vcGVyYXRvci5tYXRjaGVyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbk1hdGNoZXIge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBnZXRQcm9wZXJ0eUV4cHJlc3Npb25NYXRjaGVyOiBHZXRQcm9wZXJ0eUV4cHJlc3Npb25NYXRjaGVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgc2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlcjogU2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIG1ldGhvZEV4cHJlc3Npb25NYXRjaGVyOiBNZXRob2RFeHByZXNzaW9uTWF0Y2hlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5hbWVkTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXI6IE5hbWVkTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBpbk9wZXJhdG9yRXhwcmVzc2lvbk1hdGNoZXI6IEluT3BlcmF0b3JNYXRjaGVyKSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgbWF0Y2hlZChsZWZ0OiBJbnRlcmFjdGlvbiwgcmlnaHQ6IEV4cGVjdGVkRXhwcmVzc2lvbnM8YW55Pik6IGJvb2xlYW4ge1xuXG4gICAgICAgIGlmIChsZWZ0ID09PSByaWdodCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChyaWdodCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIEdldFByb3BlcnR5SW50ZXJhY3Rpb24gJiYgKHJpZ2h0IGluc3RhbmNlb2YgRXhwZWN0ZWRHZXRQcm9wZXJ0eUV4cHJlc3Npb24gfHwgcmlnaHQgaW5zdGFuY2VvZiBJdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFByb3BlcnR5RXhwcmVzc2lvbk1hdGNoZXIubWF0Y2hlZChsZWZ0LCByaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlZnQgaW5zdGFuY2VvZiBTZXRQcm9wZXJ0eUludGVyYWN0aW9uICYmIChyaWdodCBpbnN0YW5jZW9mIEV4cGVjdGVkU2V0UHJvcGVydHlFeHByZXNzaW9uIHx8IHJpZ2h0IGluc3RhbmNlb2YgSXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRQcm9wZXJ0eUV4cHJlc3Npb25NYXRjaGVyLm1hdGNoZWQobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0IGluc3RhbmNlb2YgSW5PcGVyYXRvckludGVyYWN0aW9uICYmIChyaWdodCBpbnN0YW5jZW9mIEV4cGVjdGVkSW5PcGVyYXRvckV4cHJlc3Npb24gfHwgcmlnaHQgaW5zdGFuY2VvZiBJdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluT3BlcmF0b3JFeHByZXNzaW9uTWF0Y2hlci5tYXRjaGVkKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIE1ldGhvZEludGVyYWN0aW9uICYmIChyaWdodCBpbnN0YW5jZW9mIEV4cGVjdGVkTWV0aG9kRXhwcmVzc2lvbiB8fCByaWdodCBpbnN0YW5jZW9mIEl0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIubWF0Y2hlZChsZWZ0LCByaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlZnQgaW5zdGFuY2VvZiBOYW1lZE1ldGhvZEludGVyYWN0aW9uICYmIChyaWdodCBpbnN0YW5jZW9mIEV4cGVjdGVkTmFtZWRNZXRob2RFeHByZXNzaW9uIHx8IHJpZ2h0IGluc3RhbmNlb2YgSXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lZE1ldGhvZEV4cHJlc3Npb25NYXRjaGVyLm1hdGNoZWQobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==