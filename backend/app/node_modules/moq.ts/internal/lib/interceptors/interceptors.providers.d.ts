import { ApplyTrap } from "./apply.trap";
import { Tracker } from "../tracker/tracker";
import { InteractionPlayer } from "../interaction-players/interaction.player";
import { GetTrap } from "./get.trap";
import { PropertiesValueStorage } from "./properties-value.storage";
import { HasPropertyExplorer } from "../explorers/has-property.explorer/has-property.explorer";
import { HasMethodExplorer } from "../explorers/has-method.explorer/has-method.explorer";
import { SpyFunctionProvider } from "./spy-function.provider";
import { GetPrototypeOfTrap } from "./get-prototype-of.trap";
import { PrototypeStorage } from "./prototype.storage";
import { HasTrap } from "./has.trap";
import { InOperatorInteractionExplorer } from "../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer";
import { PresetPlayablesUpdater } from "../playables/preset-playables.updater";
import { SetTrap } from "./set.trap";
import { SetPrototypeOfTrap } from "./set-prototype-of.trap";
import { ProxyFactory } from "./proxy.factory";
import { PropertyIsReadOnlyTester } from "../explorers/has-property.explorer/property-is-read-only.tester";
/**
 * @hidden
 */
export declare const interceptorsProviders: ({
    provide: typeof ProxyFactory;
    useClass: typeof ProxyFactory;
    deps: (typeof ApplyTrap | typeof GetPrototypeOfTrap | typeof GetTrap | typeof HasTrap | typeof SetTrap | typeof SetPrototypeOfTrap | import("../static.injector/injection_token").InjectionToken<import("../moq").IMockOptions<any>>)[];
    useFactory?: undefined;
} | {
    provide: typeof ApplyTrap;
    useClass: typeof ApplyTrap;
    deps: (typeof Tracker | typeof InteractionPlayer)[];
    useFactory?: undefined;
} | {
    provide: typeof GetTrap;
    useClass: typeof GetTrap;
    deps: (typeof Tracker | typeof HasMethodExplorer | typeof HasPropertyExplorer | typeof InteractionPlayer | typeof PropertiesValueStorage | typeof SpyFunctionProvider | import("../static.injector/injection_token").InjectionToken<import("../moq").IMock<unknown>>)[];
    useFactory?: undefined;
} | {
    provide: typeof GetPrototypeOfTrap;
    useClass: typeof GetPrototypeOfTrap;
    deps: (typeof PrototypeStorage)[];
    useFactory?: undefined;
} | {
    provide: typeof HasTrap;
    useClass: typeof HasTrap;
    deps: (typeof Tracker | typeof HasMethodExplorer | typeof HasPropertyExplorer | typeof InOperatorInteractionExplorer | typeof PresetPlayablesUpdater | typeof InteractionPlayer | typeof PropertiesValueStorage)[];
    useFactory?: undefined;
} | {
    provide: typeof PropertiesValueStorage;
    useClass: typeof PropertiesValueStorage;
    deps: any[];
    useFactory?: undefined;
} | {
    provide: typeof PrototypeStorage;
    useFactory: ({ target }: {
        target: any;
    }) => PrototypeStorage;
    deps: import("../static.injector/injection_token").InjectionToken<import("../moq").IMockOptions<any>>[];
    useClass?: undefined;
} | {
    provide: typeof SetTrap;
    useClass: typeof SetTrap;
    deps: (typeof Tracker | typeof PropertyIsReadOnlyTester | typeof InteractionPlayer | typeof PropertiesValueStorage)[];
    useFactory?: undefined;
} | {
    provide: typeof SetPrototypeOfTrap;
    useClass: typeof SetPrototypeOfTrap;
    deps: (typeof PrototypeStorage)[];
    useFactory?: undefined;
} | {
    provide: typeof SpyFunctionProvider;
    useClass: typeof SpyFunctionProvider;
    deps: (typeof Tracker | typeof InteractionPlayer)[];
    useFactory?: undefined;
})[];
