import { VerifyFormatter } from "./verify-formatter";
import { ExpectedExpressionFormatter } from "./expected-expression-formatter";
import { TrackedExpressionsFormatter } from "./tracked-expressions-formatter";
import { ExpressionFormatter } from "./expression-formatter";
import { SetPropertyExpressionFormatter } from "./set.property-formatter";
import { ConstantFormatter } from "./constant-formatter";
import { PropertyKeyFormatter } from "./property-key.formatter";
import { NamedMethodExpressionFormatter } from "./named.method-formatter";
import { MethodExpressionFormatter } from "./method-formatter";
import { InOperatorFormatter } from "./in-operator.formatter";
import { GetPropertyExpressionFormatter } from "./get.property-formatter";
/**
 * @hidden
 */
export declare const formattersProviders: ({
    provide: typeof VerifyFormatter;
    useClass: typeof VerifyFormatter;
    deps: (typeof ExpectedExpressionFormatter | typeof TrackedExpressionsFormatter)[];
} | {
    provide: typeof TrackedExpressionsFormatter;
    useClass: typeof TrackedExpressionsFormatter;
    deps: (typeof ExpressionFormatter)[];
} | {
    provide: typeof SetPropertyExpressionFormatter;
    useClass: typeof SetPropertyExpressionFormatter;
    deps: (typeof PropertyKeyFormatter)[];
} | {
    provide: typeof PropertyKeyFormatter;
    useClass: typeof PropertyKeyFormatter;
    deps: any[];
} | {
    provide: typeof NamedMethodExpressionFormatter;
    useClass: typeof NamedMethodExpressionFormatter;
    deps: (typeof PropertyKeyFormatter)[];
} | {
    provide: typeof MethodExpressionFormatter;
    useClass: typeof MethodExpressionFormatter;
    deps: (typeof ConstantFormatter)[];
} | {
    provide: typeof InOperatorFormatter;
    useClass: typeof InOperatorFormatter;
    deps: (typeof PropertyKeyFormatter)[];
} | {
    provide: typeof GetPropertyExpressionFormatter;
    useClass: typeof GetPropertyExpressionFormatter;
    deps: (typeof PropertyKeyFormatter)[];
} | {
    provide: typeof ExpressionFormatter;
    useClass: typeof ExpressionFormatter;
    deps: (typeof GetPropertyExpressionFormatter | typeof ConstantFormatter | typeof SetPropertyExpressionFormatter | typeof MethodExpressionFormatter | typeof NamedMethodExpressionFormatter | typeof InOperatorFormatter)[];
} | {
    provide: typeof ExpectedExpressionFormatter;
    useClass: typeof ExpectedExpressionFormatter;
    deps: (typeof ExpressionFormatter)[];
})[];
